{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,E,E,O,C,e,I,G,E,E,O,C,e,I,GCiBC,IAAA,EAAA,EAAA,S,E,E,SAMM,IAAM,EAAe,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,IAEf,EAAe,AAAC,IAE3B,IAAM,EAAc,EAAM,eAAe,CACvC,CAAC,EAAE,SAAS,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAM,eAAe,CAAC,CAAC,CAAG,KAAA,EAEnE,EAAgB,EAAc,aAAa,OAAO,CAAC,GAAe,KAGlE,CAAC,EAAe,EAAiB,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,AAAmB,KAAA,IAAnB,EAAM,QAAQ,CAC/D,EAAM,QAAQ,CAAG,GAGb,EAAmB,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,IAG1B,CAAC,EAAc,EAAgB,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,IAG3C,CAAC,EAAM,EAAQ,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,MAG3B,EAAQ,UACZ,GAAI,CACF,EAAgB,IAChB,IAAM,EAAW,MAAM,MAAM,SAAU,CACrC,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,SAAS,CAAC,CAEnB,SAAU,EACV,SAAU,EAAiB,OAAO,CAAC,KAAK,AAC1C,EACF,GACA,GAAI,CAAC,EAAS,EAAE,CAAE,CAEhB,GAAI,AAAoB,MAApB,EAAS,MAAM,CAEjB,MAAM,AAAI,MAAM,WAGhB,OAAM,AAAI,MAAM,CAAC,EAAE,EAAS,MAAM,CAAC,CAAC,EAAE,EAAS,UAAU,CAAC,CAAC,CAE/D,CAEA,IAAM,EAAO,M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","sources":["<anon>","src/js/Authenticate.jsx","src/js/report01.jsx","src/js/ToDoList.jsx"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire49ed\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire49ed\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"brsYM\", function(module, exports) {\n\n$parcel$export(module.exports, \"LoginContext\", () => $0cfbb9ccf2d9087e$export$a0806b2ebea0c4e);\n$parcel$export(module.exports, \"Authenticate\", () => $0cfbb9ccf2d9087e$export$3f934a281632646c);\n/**\r\n * 簡易ログイン機能\r\n * <Authenticate> ... </Authenticate>\r\n * \r\n * 未ログイン時: ログインの画面を表示する．\r\n * ログイン時：子要素を表示する．ならびにログオフボタンを上部に表示する．\r\n * \r\n * [自動ログインの実験的機能]\r\n * propsとして，username, passwordが渡されると，コンポーネントのマウント時に\r\n * 指定されたusernameとpasswordを使って自動的にログインを試みることにする．\r\n * ログアウトボタンは表示されない．\r\n * [開発支援用：localStorageにユーザ名を保存する機能]\r\n * propsに usernameSaveKey が指定されると，\r\n * usernameSaveKeyで指定された値をkeyとしてlocalStorageにユーザ名を保存する．\r\n * 保存されたユーザ名は，次回のマウント時に自動的に読み込まれ，ユーザ名に設定される．\r\n * その際には便宜的にpasswordはusernameと同じものに設定される．\r\n * ユーザはログインボタンをクリックすればログインされることになる．\r\n */ \nvar $c54Ow = parcelRequire(\"c54Ow\");\n\n\nvar $lbJE2 = parcelRequire(\"lbJE2\");\nconst $0cfbb9ccf2d9087e$export$a0806b2ebea0c4e = /*#__PURE__*/ (0, $lbJE2.createContext)();\nconst $0cfbb9ccf2d9087e$export$3f934a281632646c = (props)=>{\n    // localStorageに保存するユーザ名のキー\n    const usernameKey = props.usernameSaveKey ? `${document.location.pathname}#Authenticate${props.usernameSaveKey}` : undefined;\n    // localStorageからユーザ名を取得する．無ければ値をnullにする．\n    const savedUsername = usernameKey ? localStorage.getItem(usernameKey) : null;\n    // ユーザ名の入力\n    const [usernameInput, setUsernameInput] = (0, $lbJE2.useState)(props.username !== undefined ? props.username : savedUsername);\n    // passwordの入力 useRefを使って，値を取得する．\n    const passwordInputRef = (0, $lbJE2.useRef)(\"\");\n    // /loginにPOSTリクエストを送った際のエラーメッセージを表示する．\n    const [errorMessage, setErrorMessage] = (0, $lbJE2.useState)(\"\");\n    // ユーザ情報（usernameとtoken）を保持する．\n    const [user, setUser] = (0, $lbJE2.useState)(null);\n    // ログイン：loginのAPIを呼ぶ．\n    const login = async ()=>{\n        try {\n            setErrorMessage(\"\");\n            const response = await fetch(\"/login\", {\n                method: \"post\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    // username と password を渡す．\n                    username: usernameInput,\n                    password: passwordInputRef.current.value\n                })\n            });\n            if (!response.ok) {\n                // statusが200番台以外の時はエラーとして扱う．\n                if (response.status === 403) // Forbiddenエラーであれば，ログインエラーとして扱う．\n                throw new Error(\"\\u30ED\\u30B0\\u30A4\\u30F3\\u30FB\\u30A8\\u30E9\\u30FC\");\n                else // それ以外であれば，statusコードとstatusテキストをエラーとして表示することにする．\n                throw new Error(`${response.status} ${response.statusText}`);\n            }\n            // ユーザ情報（usernameとtoken）がJSONレスポンスとして返ってくるので，これをuserに保存する．\n            const data = await response.json();\n            setUser(data);\n            // ユーザ名をlocalStorageに保存する．\n            if (usernameKey !== undefined) localStorage.setItem(usernameKey, usernameInput);\n        } catch (error) {\n            setErrorMessage(error.message);\n            // エラーの場合は，ユーザ情報を削除することにする．\n            setUser(null);\n            if (usernameKey !== undefined) localStorage.removeItem(usernameKey);\n        }\n    };\n    // ログアウト：ユーザ情報を削除する．\n    const logout = ()=>{\n        setUser(null);\n        if (usernameKey !== undefined) localStorage.removeItem(usernameKey);\n    };\n    // 実験的な自動ログイン機能\n    (0, $lbJE2.useEffect)(()=>{\n        // usernameとpasswordがpropsに指定されている時には自動ログインを行うことにする．\n        if (props.username !== undefined && props.password !== undefined) {\n            // passwordを設定する．\n            passwordInputRef.current.value = props.password;\n            // ログインを試みる．\n            login();\n        } else if (usernameKey !== undefined) {\n            // ユーザ名をlocalStorageから取得する．\n            const username = localStorage.getItem(usernameKey);\n            if (username !== null) {\n                // 便宜的にpasswordをusernameと同じものに設定する．\n                passwordInputRef.current.value = username;\n                // ユーザ名を設定する．\n                setUsernameInput(username);\n            // 自動的にログインする場合は，loginを呼ぶ．\n            // login();\n            }\n        }\n    }, []);\n    return user ? /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                className: \"authenticate-logout\",\n                children: [\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"span\", {\n                        children: [\n                            \"User: \",\n                            user ? user.username : \"\"\n                        ]\n                    }),\n                    props.username !== undefined && props.password !== undefined ? null : /*#__PURE__*/ (0, $c54Ow.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: logout,\n                        children: \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $c54Ow.jsx)($0cfbb9ccf2d9087e$export$a0806b2ebea0c4e.Provider, {\n                value: user,\n                children: props.children\n            })\n        ]\n    }) : /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                className: \"authenticate-login\",\n                children: [\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"label\", {\n                        children: [\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: \"\\u30E6\\u30FC\\u30B6\\u540D:\"\n                            }),\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                                    type: \"text\",\n                                    placeholder: \"\\u30E6\\u30FC\\u30B6\\u540D\",\n                                    onChange: (event)=>setUsernameInput(event.target.value),\n                                    value: usernameInput\n                                })\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"label\", {\n                        children: [\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9:\"\n                            }),\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                                    type: \"password\",\n                                    ref: passwordInputRef,\n                                    placeholder: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\",\n                                    defaultValue: \"\"\n                                })\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: login,\n                        children: \"\\u30ED\\u30B0\\u30A4\\u30F3\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                children: errorMessage === \"\" ? null : /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                    className: \"error-message\",\n                    onClick: ()=>setErrorMessage(\"\"),\n                    children: errorMessage\n                })\n            })\n        ]\n    });\n};\n\n});\n\n/**\r\n * 第１回レポート課題用のJSXファイル\r\n */ // React DOMの関数をimportする．\n\nvar $c54Ow = parcelRequire(\"c54Ow\");\n\nvar $dFw4U = parcelRequire(\"dFw4U\");\n\nvar $aFIWk = parcelRequire(\"aFIWk\");\n/**\r\n * ToDoリストのユーザインタフェース\r\n */ // CSS定義を使用する場合\n/* ここから */ \nvar $c54Ow = parcelRequire(\"c54Ow\");\n\n\nvar $lbJE2 = parcelRequire(\"lbJE2\");\n\nvar $brsYM = parcelRequire(\"brsYM\");\n/* ここまで */ //React-Draggableのimport\n//import Draggable from 'react-draggable';\n//日付を表す文字列を求める\nconst $efbe0047fb07abaf$var$today = new Date();\nconst $efbe0047fb07abaf$var$year = $efbe0047fb07abaf$var$today.getFullYear();\nconst $efbe0047fb07abaf$var$month = $efbe0047fb07abaf$var$today.getMonth() + 1;\nconst $efbe0047fb07abaf$var$day = $efbe0047fb07abaf$var$today.getDate();\nconst $efbe0047fb07abaf$var$todayStr = `${$efbe0047fb07abaf$var$year.toString()}-${$efbe0047fb07abaf$var$month.toString().padStart(2, \"0\")}-\r\n${$efbe0047fb07abaf$var$day.toString().padStart(2, \"0\")}`;\nconst $efbe0047fb07abaf$export$d3eab3925e9ddc7d = (props)=>{\n    /* ここから */ // state変数の定義\n    // タスクのリスト\n    const [taskList, setTaskList] = (0, $lbJE2.useState)([]);\n    //エラーメッセージ用変数\n    const [errorMessage, setErrorMessage] = (0, $lbJE2.useState)(\"\");\n    //ログインコンテキスト\n    const user = (0, $lbJE2.useContext)((0, $brsYM.LoginContext));\n    const authHeader = user ? {\n        \"Authorization\": \"Bearer \" + user.token\n    } : {};\n    //締め切り過ぎているかどうか\n    const isTaskOverdue = (task)=>!task[\"completed\"] && task[\"deadline\"] && task[\"deadline\"] < $efbe0047fb07abaf$var$todayStr;\n    // タスクリストをサーバから取得する\n    const getTaskList = async ()=>{\n        try {\n            setErrorMessage(\"\");\n            // GETリクエストを送る．\n            const response = await fetch(props.url, {\n                method: \"GET\",\n                headers: authHeader\n            });\n            if (!response.ok) // statusが200番台以外の時はエラーとして扱う．\n            throw new Error(`${response.status} ${response.statusText}`);\n            // JSONレスポンスを取得する．\n            const data = await response.json();\n            setTaskList(data);\n        } catch (error) {\n            setErrorMessage(error.message);\n        }\n    };\n    // タスクを追加する\n    const [taskInput, setTaskInput] = (0, $lbJE2.useState)(\"\");\n    const addTask = async ()=>{\n        const deadline = deadlineInputRef.current.value;\n        try {\n            setErrorMessage(\"\");\n            // POSTリクエストを送る．\n            const response = await fetch(props.url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...authHeader\n                },\n                body: JSON.stringify({\n                    description: taskInput,\n                    completed: false,\n                    // ログイン時にはタスクのプロパティにユーザ名を追加することにしている．\n                    ...user ? {\n                        username: user.username\n                    } : {},\n                    ...deadline ? {\n                        deadline: deadline\n                    } : {}\n                })\n            });\n            if (!response.ok) // statusが200番台以外の時はエラーとして扱う．\n            throw new Error(`${response.status} ${response.statusText}`);\n            // 入力エリアをクリアする．\n            setTaskInput(\"\");\n            //タスク追加後、締め切りの入力をクリアする\n            deadlineInputRef.current.value = \"\";\n            // タスクリストを更新する．\n            getTaskList();\n        } catch (error) {\n            setErrorMessage(error.message);\n        }\n    };\n    //\n    const handleTaskInput = (event)=>{\n        setTaskInput(event.target.value);\n    };\n    //タスクの削除\n    const deleteTask = async (task)=>{\n        try {\n            setErrorMessage(\"\");\n            // DELETEリクエストを送る．\n            const response = await fetch(props.url + \"/\" + task._id, {\n                method: \"DELETE\",\n                headers: authHeader\n            });\n            if (!response.ok) // statusが200番台以外の時はエラーとして扱う．\n            throw new Error(`${response.status} ${response.statusText}`);\n            // タスクリストを更新する．\n            getTaskList();\n        } catch (error) {\n            setErrorMessage(error.message);\n        }\n    };\n    const updateTask = async (task, delta)=>{\n        // オブジェクトリテラルのスプレッド構文を使用\n        const updatedTask = {\n            ...task,\n            ...delta\n        };\n        try {\n            setErrorMessage(\"\");\n            // PUTリクエストを送る．\n            const response = await fetch(props.url + \"/\" + task._id, {\n                method: \"PUT\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    ...authHeader\n                },\n                body: JSON.stringify(updatedTask)\n            });\n            if (!response.ok) // statusが200番台以外の時はエラーとして扱う．\n            throw new Error(`${response.status} ${response.statusText}`);\n            // タスクリストを更新する．\n            getTaskList();\n        } catch (error) {\n            setErrorMessage(error.message);\n        }\n    };\n    /* ここまで */ // コンポーネントを最初に描画する時にタスクリストを更新する\n    (0, $lbJE2.useEffect)(()=>{\n        getTaskList();\n    }, []);\n    //ref変数を宣言する\n    const deadlineInputRef = (0, $lbJE2.useRef)(null);\n    //完了済みのタスクを表示するか否かをstate変数として定義する\n    const [showCompleted, setShowCompleted] = (0, $lbJE2.useState)(true);\n    const filteredTaskList = taskList.filter((task)=>showCompleted || !task[\"completed\"]);\n    //Enterキーで入力をするためのイベントを作っておく\n    const [isComposing, setIsComposing] = (0, $lbJE2.useState)(false);\n    function handleKeyDown(event) {\n        if (event.key === \"Enter\" && !isComposing) // 入力を確定したときの処理（送信・表示・入力フォームのクリアなど）\n        handleSubmit();\n    }\n    return /* ここから */ /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n        className: \"todo-list\",\n        children: [\n            /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                className: \"todo-list-head\",\n                children: [\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"span\", {\n                        onClick: getTaskList,\n                        children: [\n                            \"ToDo\\u30EA\\u30B9\\u30C8 [\",\n                            props.url,\n                            \"] \"\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"label\", {\n                        children: [\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                                type: \"checkbox\",\n                                checked: showCompleted,\n                                onChange: (e)=>{\n                                    setShowCompleted(e.target.checked);\n                                }\n                            }),\n                            \"\\u5B8C\\u4E86\\u6E08\\u306E\\u30BF\\u30B9\\u30AF\\u3082\\u8868\\u793A\"\n                        ]\n                    })\n                ]\n            }),\n            filteredTaskList.length === 0 ? null : /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                className: \"todo-list-task-list\",\n                children: filteredTaskList.map((task)=>//<Draggable>\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                        className: \"todo-list-task\" + (task[\"completed\"] ? \" todo-list-completed\" : \"\") + (isTaskOverdue(task) ? \" todo-list-overdue\" : \"\"),\n                        children: [\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                                type: \"checkbox\",\n                                checked: task[\"completed\"],\n                                onChange: (e)=>updateTask(task, {\n                                        completed: e.target.checked\n                                    })\n                            }),\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                className: \"todo-list-description\",\n                                children: task[\"description\"]\n                            }),\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                                className: \"todo-list-deadline\",\n                                type: \"date\",\n                                value: task[\"deadline\"],\n                                onChange: (e)=>updateTask(task, {\n                                        deadline: e.target.value\n                                    })\n                            }),\n                            /*#__PURE__*/ (0, $c54Ow.jsxs)(\"span\", {\n                                className: \"todo-list-username\",\n                                children: [\n                                    \"\\u3010\",\n                                    task[\"username\"],\n                                    \"\\u3011\"\n                                ]\n                            }),\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"button\", {\n                                type: \"button\",\n                                onClick: ()=>deleteTask(task),\n                                children: \"\\u524A\\u9664\"\n                            })\n                        ]\n                    }, task[\"_id\"]))\n            }),\n            /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                className: \"todo-list-task-input\",\n                children: [\n                    /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                        type: \"text\",\n                        onChange: handleTaskInput,\n                        placeholder: \"\\u30BF\\u30B9\\u30AF\",\n                        value: taskInput,\n                        onKeyDown: handleKeyDown,\n                        onCompositionStart: ()=>setIsComposing(true),\n                        onCompositionEnd: ()=>setIsComposing(false)\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                        type: \"date\",\n                        ref: deadlineInputRef,\n                        defaultValue: \"\"\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: addTask,\n                        children: \"\\u8FFD\\u52A0\"\n                    })\n                ]\n            }),\n            errorMessage === \"\" ? null : /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                className: \"error-message\",\n                onClick: ()=>setErrorMessage(\"\"),\n                children: errorMessage\n            })\n        ]\n    });\n};\n\n\n\nvar $brsYM = parcelRequire(\"brsYM\");\n// ReactコンポーネントをidがrootであるDOM要素に配置する．\nconst $26362955e6066e4d$var$root = (0, $dFw4U.createRoot)(document.getElementById(\"root\"));\n$26362955e6066e4d$var$root.render(/*#__PURE__*/ (0, $c54Ow.jsxs)((0, $aFIWk.ErrorBoundary), {\n    children: [\n        /*#__PURE__*/ (0, $c54Ow.jsx)(\"p\", {\n            children: \"\\u30ED\\u30B0\\u30A4\\u30F3\\u6A5F\\u80FD\\u3092\\u4F7F\\u7528\\u3057\\u305F\\u5834\\u5408\"\n        }),\n        /*#__PURE__*/ (0, $c54Ow.jsx)((0, $brsYM.Authenticate), {\n            usernameSaveKey: \"key1\",\n            children: /*#__PURE__*/ (0, $c54Ow.jsx)((0, $efbe0047fb07abaf$export$d3eab3925e9ddc7d), {\n                url: \"/todo-secure\"\n            })\n        })\n    ]\n}));\n\n\n//# sourceMappingURL=report01.7b7770fb.js.map\n","/**\r\n * 簡易ログイン機能\r\n * <Authenticate> ... </Authenticate>\r\n * \r\n * 未ログイン時: ログインの画面を表示する．\r\n * ログイン時：子要素を表示する．ならびにログオフボタンを上部に表示する．\r\n * \r\n * [自動ログインの実験的機能]\r\n * propsとして，username, passwordが渡されると，コンポーネントのマウント時に\r\n * 指定されたusernameとpasswordを使って自動的にログインを試みることにする．\r\n * ログアウトボタンは表示されない．\r\n * [開発支援用：localStorageにユーザ名を保存する機能]\r\n * propsに usernameSaveKey が指定されると，\r\n * usernameSaveKeyで指定された値をkeyとしてlocalStorageにユーザ名を保存する．\r\n * 保存されたユーザ名は，次回のマウント時に自動的に読み込まれ，ユーザ名に設定される．\r\n * その際には便宜的にpasswordはusernameと同じものに設定される．\r\n * ユーザはログインボタンをクリックすればログインされることになる．\r\n */\r\nimport '../css/Authenticate.css';\r\n\r\nimport { useState, useRef, createContext, useEffect } from 'react';\r\n\r\n// ユーザ情報を子要素に渡すために context を使用する．\r\nexport const LoginContext = createContext();\r\n\r\nexport const Authenticate = (props) => {\r\n  // localStorageに保存するユーザ名のキー\r\n  const usernameKey = props.usernameSaveKey ?\r\n    `${document.location.pathname}#Authenticate${props.usernameSaveKey}` : undefined;\r\n  // localStorageからユーザ名を取得する．無ければ値をnullにする．\r\n  const savedUsername = usernameKey ? localStorage.getItem(usernameKey) : null;\r\n\r\n  // ユーザ名の入力\r\n  const [usernameInput, setUsernameInput] = useState(props.username !== undefined ?\r\n    props.username : savedUsername);\r\n\r\n  // passwordの入力 useRefを使って，値を取得する．\r\n  const passwordInputRef = useRef('');\r\n\r\n  // /loginにPOSTリクエストを送った際のエラーメッセージを表示する．\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  // ユーザ情報（usernameとtoken）を保持する．\r\n  const [user, setUser] = useState(null);\r\n\r\n  // ログイン：loginのAPIを呼ぶ．\r\n  const login = async () => {\r\n    try {\r\n      setErrorMessage('');\r\n      const response = await fetch('/login', {\r\n        method: 'post',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          // username と password を渡す．\r\n          username: usernameInput,\r\n          password: passwordInputRef.current.value\r\n        })\r\n      });\r\n      if (!response.ok) {\r\n        // statusが200番台以外の時はエラーとして扱う．\r\n        if (response.status === 403) {\r\n          // Forbiddenエラーであれば，ログインエラーとして扱う．\r\n          throw new Error('ログイン・エラー');\r\n        } else {\r\n          // それ以外であれば，statusコードとstatusテキストをエラーとして表示することにする．\r\n          throw new Error(`${response.status} ${response.statusText}`);\r\n        }\r\n      }\r\n      // ユーザ情報（usernameとtoken）がJSONレスポンスとして返ってくるので，これをuserに保存する．\r\n      const data = await response.json();\r\n      setUser(data);\r\n      // ユーザ名をlocalStorageに保存する．\r\n      if (usernameKey !== undefined) {\r\n        localStorage.setItem(usernameKey, usernameInput);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n      // エラーの場合は，ユーザ情報を削除することにする．\r\n      setUser(null);\r\n      if (usernameKey !== undefined) {\r\n        localStorage.removeItem(usernameKey);\r\n      }\r\n    }\r\n  };\r\n\r\n  // ログアウト：ユーザ情報を削除する．\r\n  const logout = () => {\r\n    setUser(null);\r\n    if (usernameKey !== undefined) {\r\n      localStorage.removeItem(usernameKey);\r\n    }\r\n  };\r\n\r\n  // 実験的な自動ログイン機能\r\n  useEffect(() => {\r\n    // usernameとpasswordがpropsに指定されている時には自動ログインを行うことにする．\r\n    if (props.username !== undefined && props.password !== undefined) {\r\n      // passwordを設定する．\r\n      passwordInputRef.current.value = props.password;\r\n      // ログインを試みる．\r\n      login();\r\n    } else if (usernameKey !== undefined) {\r\n      // ユーザ名をlocalStorageから取得する．\r\n      const username = localStorage.getItem(usernameKey);\r\n      if (username !== null) {\r\n        // 便宜的にpasswordをusernameと同じものに設定する．\r\n        passwordInputRef.current.value = username;\r\n        // ユーザ名を設定する．\r\n        setUsernameInput(username);\r\n        // 自動的にログインする場合は，loginを呼ぶ．\r\n        // login();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (user ?\r\n    <div>\r\n      {/* ログインしている場合 */}\r\n      <div className=\"authenticate-logout\">\r\n        <span>User: {user ? user.username : ''}</span>\r\n        {/* 自動ログインの場合はログアウトボタンを表示しないことにする． */}\r\n        {(props.username !== undefined && props.password !== undefined) ? null :\r\n          <button type=\"button\" onClick={logout}>ログアウト</button>}\r\n      </div>\r\n      <LoginContext.Provider value={user}>\r\n        {/* userをLoginContextに渡すとともに，子要素を表示する． */}\r\n        {props.children}\r\n      </LoginContext.Provider>\r\n    </div>\r\n    :\r\n    <div>\r\n      {/* 未ログインの場合 */}\r\n      <div className=\"authenticate-login\">\r\n        <label>\r\n          <span>ユーザ名:</span>\r\n          <span><input type=\"text\" placeholder=\"ユーザ名\"\r\n            onChange={(event) => setUsernameInput(event.target.value)} value={usernameInput} />\r\n          </span>\r\n        </label>\r\n        <label>\r\n          <span>パスワード:</span>\r\n          <span><input type=\"password\" ref={passwordInputRef}\r\n            placeholder=\"パスワード\" defaultValue='' />\r\n          </span>\r\n        </label>\r\n        <button type=\"button\" onClick={login}>ログイン</button>\r\n      </div>\r\n      <div>\r\n        {errorMessage === '' ? null :\r\n          <div className=\"error-message\" onClick={() => setErrorMessage('')}>\r\n            {errorMessage}</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","/**\r\n * 第１回レポート課題用のJSXファイル\r\n */\r\n// React DOMの関数をimportする．\r\nimport { createRoot } from 'react-dom/client';\r\n\r\n// デバッグ用にエラー発生時にエラーメッセージを表示するコンポーネントで囲む．\r\nimport { ErrorBoundary } from './ErrorBoundary';\r\n\r\n// ToDoListのコンポーネントの定義をimportする．\r\n/* ここから */\r\n\r\nimport { ToDoList } from './ToDoList';\r\n\r\n/* ここまで */\r\n\r\n//Authenticateをimportする\r\nimport { Authenticate } from './Authenticate';\r\n\r\n// ReactコンポーネントをidがrootであるDOM要素に配置する．\r\nconst root = createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <ErrorBoundary>\r\n    {/* ここから */}\r\n    <p>ログイン機能を使用した場合</p>\r\n    <Authenticate usernameSaveKey=\"key1\">\r\n      <ToDoList url=\"/todo-secure\" />\r\n    </Authenticate>\r\n    {/* ここまで */}\r\n  </ErrorBoundary>\r\n);\r\n","/**\r\n * ToDoリストのユーザインタフェース\r\n */\r\n// CSS定義を使用する場合\r\n/* ここから */\r\nimport '../css/TextChat.css';\r\n/* ここまで */\r\n// reactの関数をimportする．\r\n/* ここから */\r\n\r\nimport { useState, useEffect, useContext, useRef } from 'react';\r\n\r\n/* ここまで */\r\n\r\n// ログイン機能を使用する場合\r\n/* ここから */\r\n\r\n\r\nimport { LoginContext } from './Authenticate';\r\n\r\n\r\n/* ここまで */\r\n\r\n//React-Draggableのimport\r\n//import Draggable from 'react-draggable';\r\n\r\n\r\n//日付を表す文字列を求める\r\nconst today = new Date();\r\nconst year = today.getFullYear();\r\nconst month = today.getMonth() + 1;\r\nconst day = today.getDate();\r\nconst todayStr = `${year.toString()}-${month.toString().padStart(2, '0')}-\r\n${day.toString().padStart(2, '0')}`;\r\n\r\n// コンポーネントの定義\r\nexport const ToDoList = (props) => {\r\n  /* ここから */\r\n  // state変数の定義\r\n\r\n  // タスクのリスト\r\n  const [taskList, setTaskList] = useState([]);\r\n\r\n  //エラーメッセージ用変数\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  //ログインコンテキスト\r\n  const user = useContext(LoginContext);\r\n  const authHeader = user ? { 'Authorization': 'Bearer ' + user.token } : {};\r\n\r\n  //締め切り過ぎているかどうか\r\n  const isTaskOverdue = (task) => (\r\n    !task['completed'] && task['deadline'] && (task['deadline'] < todayStr)\r\n  );\r\n\r\n  // タスクリストをサーバから取得する\r\n  const getTaskList = async () => {\r\n    try {\r\n      setErrorMessage('');\r\n      // GETリクエストを送る．\r\n      const response = await fetch(props.url, {\r\n        method: 'GET',\r\n        headers: authHeader\r\n      });\r\n      if (!response.ok) {\r\n        // statusが200番台以外の時はエラーとして扱う．\r\n        throw new Error(`${response.status} ${response.statusText}`);\r\n      }\r\n      // JSONレスポンスを取得する．\r\n      const data = await response.json();\r\n      setTaskList(data);\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n    }\r\n  };\r\n\r\n  // タスクを追加する\r\n  const [taskInput, setTaskInput] = useState('');\r\n\r\n  const addTask = async () => {\r\n    const deadline = deadlineInputRef.current.value;\r\n    try {\r\n      setErrorMessage('');\r\n      // POSTリクエストを送る．\r\n      const response = await fetch(props.url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...authHeader\r\n        },\r\n        body: JSON.stringify({\r\n          description: taskInput,\r\n          completed: false,\r\n          // ログイン時にはタスクのプロパティにユーザ名を追加することにしている．\r\n          ...(user ? { username: user.username } : {}),\r\n          ...(deadline ? { deadline } : {})\r\n        })\r\n      });\r\n      if (!response.ok) {\r\n        // statusが200番台以外の時はエラーとして扱う．\r\n        throw new Error(`${response.status} ${response.statusText}`);\r\n      }\r\n      // 入力エリアをクリアする．\r\n      setTaskInput('');\r\n      //タスク追加後、締め切りの入力をクリアする\r\n      deadlineInputRef.current.value = '';\r\n      // タスクリストを更新する．\r\n      getTaskList();\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n    }\r\n  };\r\n\r\n  //\r\n  const handleTaskInput = (event) => {\r\n    setTaskInput(event.target.value);\r\n  };\r\n\r\n  //タスクの削除\r\n  const deleteTask = async (task) => {\r\n    try {\r\n      setErrorMessage('');\r\n      // DELETEリクエストを送る．\r\n      const response = await fetch(props.url + '/' + task._id, {\r\n        method: 'DELETE',\r\n        headers: authHeader\r\n      });\r\n      if (!response.ok) {\r\n        // statusが200番台以外の時はエラーとして扱う．\r\n        throw new Error(`${response.status} ${response.statusText}`);\r\n      }\r\n      // タスクリストを更新する．\r\n      getTaskList();\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n    }\r\n  }\r\n\r\n  const updateTask = async (task, delta) => {\r\n    // オブジェクトリテラルのスプレッド構文を使用\r\n    const updatedTask = { ...task, ...delta };\r\n    try {\r\n      setErrorMessage('');\r\n      // PUTリクエストを送る．\r\n      const response = await fetch(props.url + '/' + task._id, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...authHeader\r\n        },\r\n        body: JSON.stringify(updatedTask)\r\n      });\r\n      if (!response.ok) {\r\n        // statusが200番台以外の時はエラーとして扱う．\r\n        throw new Error(`${response.status} ${response.statusText}`);\r\n      }\r\n      // タスクリストを更新する．\r\n      getTaskList();\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n    }\r\n  };\r\n  /* ここまで */\r\n\r\n  // コンポーネントを最初に描画する時にタスクリストを更新する\r\n  useEffect(() => {\r\n    getTaskList();\r\n  }, []);\r\n\r\n  //ref変数を宣言する\r\n  const deadlineInputRef = useRef(null);\r\n\r\n  //完了済みのタスクを表示するか否かをstate変数として定義する\r\n  const [showCompleted, setShowCompleted] = useState(true);\r\n\r\n  const filteredTaskList = taskList.filter((task) => (\r\n    showCompleted || !task['completed']\r\n  ));\r\n\r\n  //Enterキーのイベント\r\n  {/*const handleSubmit = (\r\n    e: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLInputElement>,\r\n  ) => {\r\n    console.log('Click')\r\n  }\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.nativeEvent.isComposing || e.key !== 'Enter') return\r\n    handleSubmit(e)\r\n  }\r\n*/}\r\n\r\n\r\n  //Enterキーで入力をするためのイベントを作っておく\r\n  const [isComposing, setIsComposing] = useState(false);\r\n\r\n  function handleKeyDown(event) {\r\n    if (event.key === 'Enter' && !isComposing) {\r\n      // 入力を確定したときの処理（送信・表示・入力フォームのクリアなど）\r\n      handleSubmit();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    /* ここから */\r\n\r\n    <div className=\"todo-list\">\r\n      <div className=\"todo-list-head\">\r\n        <span onClick={getTaskList}>\r\n          ToDoリスト [{props.url}] </span>\r\n        <label>\r\n          <input type=\"checkbox\" checked={showCompleted}\r\n            onChange={(e) => { setShowCompleted(e.target.checked) }} />\r\n          完了済のタスクも表示\r\n        </label>\r\n      </div>\r\n      {filteredTaskList.length === 0 ? null :\r\n        <div className=\"todo-list-task-list\">\r\n          {filteredTaskList.map((task) => (\r\n            //<Draggable>\r\n            <div key={task['_id']} className={\"todo-list-task\" +\r\n              (task['completed'] ? \" todo-list-completed\" : \"\") +\r\n              (isTaskOverdue(task) ? \" todo-list-overdue\" : \"\")\r\n            }>\r\n              {/* タスクの完了 */}\r\n              <input type=\"checkbox\" checked={task['completed']}\r\n                onChange={(e) => updateTask(task, {\r\n                  completed: e.target.checked\r\n                })} />\r\n              {/* タスク記述 */}\r\n              <span className=\"todo-list-description\">{task['description']}</span>\r\n              {/* 締切の表示 */}\r\n              <input className=\"todo-list-deadline\"\r\n                type=\"date\" value={task['deadline']}\r\n                onChange={(e) => updateTask(task, {\r\n                  deadline: e.target.value\r\n                })} />\r\n              {/* ユーザ名 */}\r\n              <span className=\"todo-list-username\">【{task['username']}】</span>\r\n              {/* 削除 */}\r\n              <button type=\"button\" onClick={() => deleteTask(task)}>削除</button>\r\n            </div>\r\n            // </Draggable>\r\n          ))}\r\n        </div>\r\n      }\r\n      {/* 新規タスクの追加 */}\r\n      <div className=\"todo-list-task-input\">\r\n        <input type=\"text\" onChange={handleTaskInput}\r\n          placeholder=\"タスク\" value={taskInput}\r\n          onKeyDown={handleKeyDown}\r\n          onCompositionStart={() => setIsComposing(true)}\r\n          onCompositionEnd={() => setIsComposing(false)}\r\n        />\r\n        <input type=\"date\" ref={deadlineInputRef} defaultValue=\"\" />\r\n        <button type=\"button\" onClick={addTask}>追加</button>\r\n      </div>\r\n      {/* エラーメッセージの表示 */}\r\n      {\r\n        errorMessage === '' ? null :\r\n          <div className=\"error-message\"\r\n            onClick={() => setErrorMessage('')}>\r\n            {errorMessage}\r\n          </div>\r\n      }\r\n    </div>\r\n\r\n\r\n\r\n    /* ここまで */\r\n  );\r\n};\r\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$0cfbb9ccf2d9087e$export$a0806b2ebea0c4e","$0cfbb9ccf2d9087e$export$3f934a281632646c","$c54Ow","$lbJE2","createContext","props","usernameKey","usernameSaveKey","document","location","pathname","undefined","savedUsername","localStorage","getItem","usernameInput","setUsernameInput","useState","username","passwordInputRef","useRef","errorMessage","setErrorMessage","user","setUser","login","response","fetch","method","headers","body","JSON","stringify","password","current","value","ok","status","statusText","data","json","setItem","error","message","removeItem","useEffect","jsxs","children","className","jsx","type","onClick","Provider","placeholder","onChange","event","target","ref","defaultValue","$dFw4U","$aFIWk","$brsYM","$efbe0047fb07abaf$var$today","Date","$efbe0047fb07abaf$var$year","getFullYear","$efbe0047fb07abaf$var$month","getMonth","$efbe0047fb07abaf$var$day","getDate","$efbe0047fb07abaf$var$todayStr","toString","padStart","$26362955e6066e4d$var$root","createRoot","getElementById","render","ErrorBoundary","Authenticate","taskList","setTaskList","useContext","LoginContext","authHeader","token","isTaskOverdue","task","getTaskList","url","taskInput","setTaskInput","addTask","deadline","deadlineInputRef","description","completed","deleteTask","_id","updateTask","delta","updatedTask","showCompleted","setShowCompleted","filteredTaskList","filter","isComposing","setIsComposing","checked","length","map","onKeyDown","key","handleSubmit","onCompositionStart","onCompositionEnd"],"version":3,"file":"report01.7b7770fb.js.map"}