{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,e,I,G,E,E,O,C,e,I,GCiBC,IAAA,EAAA,EAAA,S,E,E,SAMM,IAAM,EAAe,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,IAEf,EAAe,AAAC,IAE3B,IAAM,EAAc,EAAM,eAAe,CACvC,CAAC,EAAE,SAAS,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAM,eAAe,CAAC,CAAC,CAAG,KAAA,EAEnE,EAAgB,EAAc,aAAa,OAAO,CAAC,GAAe,KAGlE,CAAC,EAAe,EAAiB,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,AAAmB,KAAA,IAAnB,EAAM,QAAQ,CAC/D,EAAM,QAAQ,CAAG,GAGb,EAAmB,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,IAG1B,CAAC,EAAc,EAAgB,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,IAG3C,CAAC,EAAM,EAAQ,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,MAG3B,EAAQ,UACZ,GAAI,CACF,EAAgB,IAChB,IAAM,EAAW,MAAM,MAAM,SAAU,CACrC,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,SAAS,CAAC,CAEnB,SAAU,EACV,SAAU,EAAiB,OAAO,CAAC,KAAK,AAC1C,EACF,GACA,GAAI,CAAC,EAAS,EAAE,CAAE,CAEhB,GAAI,AAAoB,MAApB,EAAS,MAAM,CAEjB,MAAM,AAAI,MAAM,WAGhB,OAAM,AAAI,MAAM,CAAC,EAAE,EAAS,MAAM,CAAC,CAAC,EAAE,EAAS,UAAU,CAAC,CAAC,CAE/D,CAEA,IAAM,EAAO,MAA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","sources":["<anon>","src/js/Authenticate.jsx","src/js/TextChat.jsx","src/js/report02.jsx","src/js/EchoBot.jsx"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire49ed\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire49ed\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"brsYM\", function(module, exports) {\n\n$parcel$export(module.exports, \"LoginContext\", () => $0cfbb9ccf2d9087e$export$a0806b2ebea0c4e);\n$parcel$export(module.exports, \"Authenticate\", () => $0cfbb9ccf2d9087e$export$3f934a281632646c);\n/**\r\n * 簡易ログイン機能\r\n * <Authenticate> ... </Authenticate>\r\n * \r\n * 未ログイン時: ログインの画面を表示する．\r\n * ログイン時：子要素を表示する．ならびにログオフボタンを上部に表示する．\r\n * \r\n * [自動ログインの実験的機能]\r\n * propsとして，username, passwordが渡されると，コンポーネントのマウント時に\r\n * 指定されたusernameとpasswordを使って自動的にログインを試みることにする．\r\n * ログアウトボタンは表示されない．\r\n * [開発支援用：localStorageにユーザ名を保存する機能]\r\n * propsに usernameSaveKey が指定されると，\r\n * usernameSaveKeyで指定された値をkeyとしてlocalStorageにユーザ名を保存する．\r\n * 保存されたユーザ名は，次回のマウント時に自動的に読み込まれ，ユーザ名に設定される．\r\n * その際には便宜的にpasswordはusernameと同じものに設定される．\r\n * ユーザはログインボタンをクリックすればログインされることになる．\r\n */ \nvar $c54Ow = parcelRequire(\"c54Ow\");\n\n\nvar $lbJE2 = parcelRequire(\"lbJE2\");\nconst $0cfbb9ccf2d9087e$export$a0806b2ebea0c4e = /*#__PURE__*/ (0, $lbJE2.createContext)();\nconst $0cfbb9ccf2d9087e$export$3f934a281632646c = (props)=>{\n    // localStorageに保存するユーザ名のキー\n    const usernameKey = props.usernameSaveKey ? `${document.location.pathname}#Authenticate${props.usernameSaveKey}` : undefined;\n    // localStorageからユーザ名を取得する．無ければ値をnullにする．\n    const savedUsername = usernameKey ? localStorage.getItem(usernameKey) : null;\n    // ユーザ名の入力\n    const [usernameInput, setUsernameInput] = (0, $lbJE2.useState)(props.username !== undefined ? props.username : savedUsername);\n    // passwordの入力 useRefを使って，値を取得する．\n    const passwordInputRef = (0, $lbJE2.useRef)(\"\");\n    // /loginにPOSTリクエストを送った際のエラーメッセージを表示する．\n    const [errorMessage, setErrorMessage] = (0, $lbJE2.useState)(\"\");\n    // ユーザ情報（usernameとtoken）を保持する．\n    const [user, setUser] = (0, $lbJE2.useState)(null);\n    // ログイン：loginのAPIを呼ぶ．\n    const login = async ()=>{\n        try {\n            setErrorMessage(\"\");\n            const response = await fetch(\"/login\", {\n                method: \"post\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    // username と password を渡す．\n                    username: usernameInput,\n                    password: passwordInputRef.current.value\n                })\n            });\n            if (!response.ok) {\n                // statusが200番台以外の時はエラーとして扱う．\n                if (response.status === 403) // Forbiddenエラーであれば，ログインエラーとして扱う．\n                throw new Error(\"\\u30ED\\u30B0\\u30A4\\u30F3\\u30FB\\u30A8\\u30E9\\u30FC\");\n                else // それ以外であれば，statusコードとstatusテキストをエラーとして表示することにする．\n                throw new Error(`${response.status} ${response.statusText}`);\n            }\n            // ユーザ情報（usernameとtoken）がJSONレスポンスとして返ってくるので，これをuserに保存する．\n            const data = await response.json();\n            setUser(data);\n            // ユーザ名をlocalStorageに保存する．\n            if (usernameKey !== undefined) localStorage.setItem(usernameKey, usernameInput);\n        } catch (error) {\n            setErrorMessage(error.message);\n            // エラーの場合は，ユーザ情報を削除することにする．\n            setUser(null);\n            if (usernameKey !== undefined) localStorage.removeItem(usernameKey);\n        }\n    };\n    // ログアウト：ユーザ情報を削除する．\n    const logout = ()=>{\n        setUser(null);\n        if (usernameKey !== undefined) localStorage.removeItem(usernameKey);\n    };\n    // 実験的な自動ログイン機能\n    (0, $lbJE2.useEffect)(()=>{\n        // usernameとpasswordがpropsに指定されている時には自動ログインを行うことにする．\n        if (props.username !== undefined && props.password !== undefined) {\n            // passwordを設定する．\n            passwordInputRef.current.value = props.password;\n            // ログインを試みる．\n            login();\n        } else if (usernameKey !== undefined) {\n            // ユーザ名をlocalStorageから取得する．\n            const username = localStorage.getItem(usernameKey);\n            if (username !== null) {\n                // 便宜的にpasswordをusernameと同じものに設定する．\n                passwordInputRef.current.value = username;\n                // ユーザ名を設定する．\n                setUsernameInput(username);\n            // 自動的にログインする場合は，loginを呼ぶ．\n            // login();\n            }\n        }\n    }, []);\n    return user ? /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                className: \"authenticate-logout\",\n                children: [\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"span\", {\n                        children: [\n                            \"User: \",\n                            user ? user.username : \"\"\n                        ]\n                    }),\n                    props.username !== undefined && props.password !== undefined ? null : /*#__PURE__*/ (0, $c54Ow.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: logout,\n                        children: \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $c54Ow.jsx)($0cfbb9ccf2d9087e$export$a0806b2ebea0c4e.Provider, {\n                value: user,\n                children: props.children\n            })\n        ]\n    }) : /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                className: \"authenticate-login\",\n                children: [\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"label\", {\n                        children: [\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: \"\\u30E6\\u30FC\\u30B6\\u540D:\"\n                            }),\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                                    type: \"text\",\n                                    placeholder: \"\\u30E6\\u30FC\\u30B6\\u540D\",\n                                    onChange: (event)=>setUsernameInput(event.target.value),\n                                    value: usernameInput\n                                })\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"label\", {\n                        children: [\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9:\"\n                            }),\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                                    type: \"password\",\n                                    ref: passwordInputRef,\n                                    placeholder: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\",\n                                    defaultValue: \"\"\n                                })\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: login,\n                        children: \"\\u30ED\\u30B0\\u30A4\\u30F3\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                children: errorMessage === \"\" ? null : /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                    className: \"error-message\",\n                    onClick: ()=>setErrorMessage(\"\"),\n                    children: errorMessage\n                })\n            })\n        ]\n    });\n};\n\n});\n\nparcelRegister(\"6Jdkr\", function(module, exports) {\n\n$parcel$export(module.exports, \"TextChat\", () => $15a317c7617f5e34$export$d43a277f87371557);\n/**\r\n * テキストチャット\r\n */ // CSSを使用する場合：CSSの定義の読み込み\n/* ここから */ \nvar $c54Ow = parcelRequire(\"c54Ow\");\n\n\nvar $lbJE2 = parcelRequire(\"lbJE2\");\n\nvar $brsYM = parcelRequire(\"brsYM\");\n\nvar $lHCVX = parcelRequire(\"lHCVX\");\nconst $15a317c7617f5e34$export$d43a277f87371557 = ()=>{\n    // loginContextからユーザ情報を取得する．\n    const user = (0, $lbJE2.useContext)((0, $brsYM.LoginContext));\n    const username = user ? user.username : \"\";\n    // SocketContextからソケットを受け取る．\n    const socketRef = (0, $lbJE2.useContext)((0, $lHCVX.SocketContext));\n    const socket = socketRef ? socketRef.current : null;\n    /* ここから */ // 送信するテキストメッセージの入力\n    const [inputMessage, setInputMessage] = (0, $lbJE2.useState)(\"\");\n    // 受信したテキストメッセージのリスト\n    const [messages, setMessages] = (0, $lbJE2.useState)([]);\n    // メッセージの最後までスクロールする．\n    (0, $lbJE2.useEffect)(()=>{\n        lastLineRef.current.scrollIntoView({\n            block: \"nearest\"\n        });\n    }, [\n        messages\n    ]);\n    // その他の変数（定数）を定義していく．\n    // テキストメッセージの最後の行\n    const lastLineRef = (0, $lbJE2.useRef)(null);\n    // chat の宛先\n    const [chatTo, setChatTo] = (0, $lbJE2.useState)(\"*\");\n    // サーバから送られてくるユーザのリスト\n    const [userList, setUserList] = (0, $lbJE2.useState)([]);\n    // 受信したメッセージの処理\n    const handleTextMessage = (data)=>{\n        // メッセージの最後に追加する．\n        setMessages((prevMessages)=>[\n                ...prevMessages,\n                data\n            ]);\n    };\n    // キー入力のたびにメッセージのテキストを入力するinput要素を更新する．\n    const inputChanged = (event)=>{\n        setInputMessage(event.target.value);\n    };\n    // コンポーネントがマウントされた時にソケットにイベントリスナーをつける．\n    (0, $lbJE2.useEffect)(()=>{\n        if (socket) {\n            console.log(\"[TextChat] adding listeners\");\n            // イベントリスナーを付加する．\n            socket.on(\"text\", handleTextMessage);\n            socket.on(\"user-list\", handleUserList);\n            // 最新のユーザリストを求める．\n            socket.emit(\"user-list\", {\n                from: username\n            });\n            return ()=>{\n                console.log(\"[TextChat] removing listeners\");\n                // イベントリスナーを削除する．\n                socket.off(\"text\", handleTextMessage);\n                socket.off(\"user-list\", handleUserlist);\n            };\n        }\n    }, []);\n    // メッセージの最後までスクロールする．\n    (0, $lbJE2.useEffect)(()=>{\n        lastLineRef.current.scrollIntoView({\n            block: \"nearest\"\n        });\n    }, [\n        messages\n    ]);\n    //\n    const handleUserList = (data)=>{\n        setUserList(data);\n        // 現在の宛先（chatTo）がユーザリスト（data）に含まれていなければ宛先を'*'に設定する．\n        if (data.indexOf(chatTo) < 0) setChatTo(\"*\");\n    };\n    const selectChatTo = (event)=>{\n        setChatTo(event.target.value);\n    };\n    const handleKeyUp = (event)=>{\n        if (event.key === \"Enter\" && inputMessage.length > 0) sendTextMessage();\n    };\n    const sendTextMessage = ()=>{\n        if (socket) {\n            socket.emit(\"text\", {\n                from: username,\n                to: chatTo,\n                text: inputMessage\n            });\n            // 入力エリアをクリアする．\n            setInputMessage(\"\");\n        }\n    };\n    /* ここまで */ return /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n        className: \"text-chat\",\n        children: [\n            /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                className: \"text-chat-message-list-container\",\n                children: /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                    className: \"text-chat-message-list\",\n                    children: [\n                        messages.map((message)=>/*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                                className: message.from === username ? \"text-chat-from-me\" : \"text-chat-from-them\",\n                                children: message.from === username ? /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                                    children: message.text\n                                }) : /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                                    children: [\n                                        message.from,\n                                        \" > \",\n                                        message.text\n                                    ]\n                                })\n                            }, message.from + message.time)),\n                        /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                            ref: lastLineRef\n                        }),\n                        \" \"\n                    ]\n                })\n            }),\n            \" \",\n            /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                className: \"text-chat-input\",\n                children: [\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"select\", {\n                        onChange: selectChatTo,\n                        value: chatTo,\n                        children: [\n                            \" \",\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"option\", {\n                                value: \"*\",\n                                children: \"*\"\n                            }),\n                            \" \",\n                            userList.map((u)=>/*#__PURE__*/ (0, $c54Ow.jsx)(\"option\", {\n                                    value: u,\n                                    children: u\n                                }, u))\n                        ]\n                    }),\n                    \" \",\n                    /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                        type: \"text\",\n                        onChange: inputChanged,\n                        value: inputMessage,\n                        onKeyUp: handleKeyUp\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: sendTextMessage,\n                        disabled: socket === null || inputMessage === \"\",\n                        children: \"\\u9001\\u4FE1\"\n                    }),\n                    \" \"\n                ]\n            })\n        ]\n    });\n};\n\n});\n\n/**\r\n * 第２回レポート課題用のJSXファイル\r\n */ // React DOMの関数をimportする．\n\nvar $c54Ow = parcelRequire(\"c54Ow\");\n\nvar $dFw4U = parcelRequire(\"dFw4U\");\n\nvar $aFIWk = parcelRequire(\"aFIWk\");\n\nvar $brsYM = parcelRequire(\"brsYM\");\n\nvar $lHCVX = parcelRequire(\"lHCVX\");\n\nvar $6Jdkr = parcelRequire(\"6Jdkr\");\n\nvar $c54Ow = parcelRequire(\"c54Ow\");\n\n\nvar $lbJE2 = parcelRequire(\"lbJE2\");\n\nvar $brsYM = parcelRequire(\"brsYM\");\n\nvar $lHCVX = parcelRequire(\"lHCVX\");\nconst $4b02625dc988308e$var$EchoBotCore = ()=>{\n    const user = (0, $lbJE2.useContext)((0, $brsYM.LoginContext));\n    const username = user ? user.username : \"\";\n    const socketRef = (0, $lbJE2.useContext)((0, $lHCVX.SocketContext));\n    const socket = socketRef ? socketRef.current : null;\n    // 表示用のログメッセージ\n    const [logMessage, setLogMessage] = (0, $lbJE2.useState)(\"\");\n    const handleTextMessage = (data)=>{\n        if (data.to === username && data.text) {\n            const reply = `[${data.from}] ${data.text}`;\n            // メッセージを送信する．\n            socket.emit(\"text\", {\n                from: username,\n                to: data.from,\n                text: reply\n            });\n            setLogMessage(`reply: ${reply}`);\n        }\n    };\n    (0, $lbJE2.useEffect)(()=>{\n        if (socket) {\n            console.log(`[EchoBot (${username})] adding listeners`);\n            socket.on(\"text\", handleTextMessage);\n            return ()=>{\n                console.log(`[EchoBot (${username})] removing listeners`);\n                socket.off(\"text\", handleTextMessage);\n            };\n        }\n    }, []);\n    return /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n        children: logMessage\n    });\n};\nconst $4b02625dc988308e$export$c2a0cef388769ec5 = (props)=>{\n    return /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n        className: \"echo-bot\",\n        children: /*#__PURE__*/ (0, $c54Ow.jsx)((0, $brsYM.Authenticate), {\n            username: props.botname,\n            password: props.password,\n            children: /*#__PURE__*/ (0, $c54Ow.jsx)((0, $lHCVX.WithSocket), {\n                nsp: props.nsp,\n                children: /*#__PURE__*/ (0, $c54Ow.jsx)($4b02625dc988308e$var$EchoBotCore, {})\n            })\n        })\n    });\n};\n\n\n/* ここまで */ // ReactコンポーネントをidがrootであるDOM要素に配置する．\nconst $c32bf622eed8008c$var$root = (0, $dFw4U.createRoot)(document.getElementById(\"root\"));\n$c32bf622eed8008c$var$root.render(/*#__PURE__*/ (0, $c54Ow.jsxs)((0, $aFIWk.ErrorBoundary), {\n    children: [\n        /*#__PURE__*/ (0, $c54Ow.jsx)((0, $brsYM.Authenticate), {\n            children: /*#__PURE__*/ (0, $c54Ow.jsx)((0, $lHCVX.WithSocket), {\n                nsp: \"/chat\",\n                children: /*#__PURE__*/ (0, $c54Ow.jsx)((0, $6Jdkr.TextChat), {})\n            })\n        }),\n        /*#__PURE__*/ (0, $c54Ow.jsx)(\"hr\", {}),\n        /*#__PURE__*/ (0, $c54Ow.jsx)((0, $4b02625dc988308e$export$c2a0cef388769ec5), {\n            botname: \"EchoBot\",\n            password: \"EchoBot\",\n            nsp: \"/chat\"\n        })\n    ]\n}));\n\n\n//# sourceMappingURL=report02.cf088188.js.map\n","/**\r\n * 簡易ログイン機能\r\n * <Authenticate> ... </Authenticate>\r\n * \r\n * 未ログイン時: ログインの画面を表示する．\r\n * ログイン時：子要素を表示する．ならびにログオフボタンを上部に表示する．\r\n * \r\n * [自動ログインの実験的機能]\r\n * propsとして，username, passwordが渡されると，コンポーネントのマウント時に\r\n * 指定されたusernameとpasswordを使って自動的にログインを試みることにする．\r\n * ログアウトボタンは表示されない．\r\n * [開発支援用：localStorageにユーザ名を保存する機能]\r\n * propsに usernameSaveKey が指定されると，\r\n * usernameSaveKeyで指定された値をkeyとしてlocalStorageにユーザ名を保存する．\r\n * 保存されたユーザ名は，次回のマウント時に自動的に読み込まれ，ユーザ名に設定される．\r\n * その際には便宜的にpasswordはusernameと同じものに設定される．\r\n * ユーザはログインボタンをクリックすればログインされることになる．\r\n */\r\nimport '../css/Authenticate.css';\r\n\r\nimport { useState, useRef, createContext, useEffect } from 'react';\r\n\r\n// ユーザ情報を子要素に渡すために context を使用する．\r\nexport const LoginContext = createContext();\r\n\r\nexport const Authenticate = (props) => {\r\n  // localStorageに保存するユーザ名のキー\r\n  const usernameKey = props.usernameSaveKey ?\r\n    `${document.location.pathname}#Authenticate${props.usernameSaveKey}` : undefined;\r\n  // localStorageからユーザ名を取得する．無ければ値をnullにする．\r\n  const savedUsername = usernameKey ? localStorage.getItem(usernameKey) : null;\r\n\r\n  // ユーザ名の入力\r\n  const [usernameInput, setUsernameInput] = useState(props.username !== undefined ?\r\n    props.username : savedUsername);\r\n\r\n  // passwordの入力 useRefを使って，値を取得する．\r\n  const passwordInputRef = useRef('');\r\n\r\n  // /loginにPOSTリクエストを送った際のエラーメッセージを表示する．\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  // ユーザ情報（usernameとtoken）を保持する．\r\n  const [user, setUser] = useState(null);\r\n\r\n  // ログイン：loginのAPIを呼ぶ．\r\n  const login = async () => {\r\n    try {\r\n      setErrorMessage('');\r\n      const response = await fetch('/login', {\r\n        method: 'post',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          // username と password を渡す．\r\n          username: usernameInput,\r\n          password: passwordInputRef.current.value\r\n        })\r\n      });\r\n      if (!response.ok) {\r\n        // statusが200番台以外の時はエラーとして扱う．\r\n        if (response.status === 403) {\r\n          // Forbiddenエラーであれば，ログインエラーとして扱う．\r\n          throw new Error('ログイン・エラー');\r\n        } else {\r\n          // それ以外であれば，statusコードとstatusテキストをエラーとして表示することにする．\r\n          throw new Error(`${response.status} ${response.statusText}`);\r\n        }\r\n      }\r\n      // ユーザ情報（usernameとtoken）がJSONレスポンスとして返ってくるので，これをuserに保存する．\r\n      const data = await response.json();\r\n      setUser(data);\r\n      // ユーザ名をlocalStorageに保存する．\r\n      if (usernameKey !== undefined) {\r\n        localStorage.setItem(usernameKey, usernameInput);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n      // エラーの場合は，ユーザ情報を削除することにする．\r\n      setUser(null);\r\n      if (usernameKey !== undefined) {\r\n        localStorage.removeItem(usernameKey);\r\n      }\r\n    }\r\n  };\r\n\r\n  // ログアウト：ユーザ情報を削除する．\r\n  const logout = () => {\r\n    setUser(null);\r\n    if (usernameKey !== undefined) {\r\n      localStorage.removeItem(usernameKey);\r\n    }\r\n  };\r\n\r\n  // 実験的な自動ログイン機能\r\n  useEffect(() => {\r\n    // usernameとpasswordがpropsに指定されている時には自動ログインを行うことにする．\r\n    if (props.username !== undefined && props.password !== undefined) {\r\n      // passwordを設定する．\r\n      passwordInputRef.current.value = props.password;\r\n      // ログインを試みる．\r\n      login();\r\n    } else if (usernameKey !== undefined) {\r\n      // ユーザ名をlocalStorageから取得する．\r\n      const username = localStorage.getItem(usernameKey);\r\n      if (username !== null) {\r\n        // 便宜的にpasswordをusernameと同じものに設定する．\r\n        passwordInputRef.current.value = username;\r\n        // ユーザ名を設定する．\r\n        setUsernameInput(username);\r\n        // 自動的にログインする場合は，loginを呼ぶ．\r\n        // login();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (user ?\r\n    <div>\r\n      {/* ログインしている場合 */}\r\n      <div className=\"authenticate-logout\">\r\n        <span>User: {user ? user.username : ''}</span>\r\n        {/* 自動ログインの場合はログアウトボタンを表示しないことにする． */}\r\n        {(props.username !== undefined && props.password !== undefined) ? null :\r\n          <button type=\"button\" onClick={logout}>ログアウト</button>}\r\n      </div>\r\n      <LoginContext.Provider value={user}>\r\n        {/* userをLoginContextに渡すとともに，子要素を表示する． */}\r\n        {props.children}\r\n      </LoginContext.Provider>\r\n    </div>\r\n    :\r\n    <div>\r\n      {/* 未ログインの場合 */}\r\n      <div className=\"authenticate-login\">\r\n        <label>\r\n          <span>ユーザ名:</span>\r\n          <span><input type=\"text\" placeholder=\"ユーザ名\"\r\n            onChange={(event) => setUsernameInput(event.target.value)} value={usernameInput} />\r\n          </span>\r\n        </label>\r\n        <label>\r\n          <span>パスワード:</span>\r\n          <span><input type=\"password\" ref={passwordInputRef}\r\n            placeholder=\"パスワード\" defaultValue='' />\r\n          </span>\r\n        </label>\r\n        <button type=\"button\" onClick={login}>ログイン</button>\r\n      </div>\r\n      <div>\r\n        {errorMessage === '' ? null :\r\n          <div className=\"error-message\" onClick={() => setErrorMessage('')}>\r\n            {errorMessage}</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","/**\r\n * テキストチャット\r\n */\r\n// CSSを使用する場合：CSSの定義の読み込み\r\n/* ここから */\r\nimport '../css/TextChat.css';\r\n/* ここまで */\r\n// reactから使用する関数をimportする．\r\n/* ここから */\r\nimport { useState, useEffect, useContext, useRef } from 'react';\r\n/* ここまで */\r\n\r\n// 簡易ログイン機能を使用する．\r\nimport { LoginContext } from './Authenticate';\r\n// Socket.IOのソケットを使用する．\r\nimport { SocketContext } from './WithSocket';\r\n\r\n// TextChatコンポーネントの定義\r\nexport const TextChat = () => {\r\n  // loginContextからユーザ情報を取得する．\r\n  const user = useContext(LoginContext);\r\n  const username = user ? user.username : '';\r\n  // SocketContextからソケットを受け取る．\r\n  const socketRef = useContext(SocketContext);\r\n  const socket = socketRef ? socketRef.current : null;\r\n\r\n  /* ここから */\r\n\r\n  // 送信するテキストメッセージの入力\r\n  const [inputMessage, setInputMessage] = useState('');\r\n  // 受信したテキストメッセージのリスト\r\n  const [messages, setMessages] = useState([]);\r\n\r\n\r\n  // メッセージの最後までスクロールする．\r\n  useEffect(() => {\r\n    lastLineRef.current.scrollIntoView({ block: \"nearest\" });\r\n  }, [messages]);\r\n\r\n\r\n  // その他の変数（定数）を定義していく．\r\n  // テキストメッセージの最後の行\r\n  const lastLineRef = useRef(null);\r\n  // chat の宛先\r\n  const [chatTo, setChatTo] = useState('*');\r\n  // サーバから送られてくるユーザのリスト\r\n  const [userList, setUserList] = useState([]);\r\n\r\n\r\n  // 受信したメッセージの処理\r\n  const handleTextMessage = (data) => {\r\n    // メッセージの最後に追加する．\r\n    setMessages((prevMessages) => [...prevMessages, data]);\r\n  };\r\n\r\n  // キー入力のたびにメッセージのテキストを入力するinput要素を更新する．\r\n  const inputChanged = (event) => {\r\n    setInputMessage(event.target.value);\r\n  };\r\n\r\n  // コンポーネントがマウントされた時にソケットにイベントリスナーをつける．\r\n  useEffect(() => {\r\n    if (socket) {\r\n      console.log('[TextChat] adding listeners');\r\n      // イベントリスナーを付加する．\r\n      socket.on('text', handleTextMessage);\r\n      socket.on('user-list', handleUserList);\r\n      // 最新のユーザリストを求める．\r\n      socket.emit('user-list', { from: username });\r\n\r\n      return () => {\r\n        console.log('[TextChat] removing listeners');\r\n        // イベントリスナーを削除する．\r\n        socket.off('text', handleTextMessage);\r\n        socket.off('user-list', handleUserlist);\r\n\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  // メッセージの最後までスクロールする．\r\n  useEffect(() => {\r\n    lastLineRef.current.scrollIntoView({ block: \"nearest\" });\r\n  }, [messages]);\r\n\r\n  //\r\n\r\n  const handleUserList = (data) => {\r\n    setUserList(data);\r\n    // 現在の宛先（chatTo）がユーザリスト（data）に含まれていなければ宛先を'*'に設定する．\r\n    if (data.indexOf(chatTo) < 0) {\r\n      setChatTo('*');\r\n    }\r\n  };\r\n\r\n  const selectChatTo = (event) => {\r\n    setChatTo(event.target.value);\r\n  };\r\n\r\n  const handleKeyUp = (event) => {\r\n    if (event.key === \"Enter\" && inputMessage.length > 0) {\r\n      sendTextMessage();\r\n    }\r\n  };\r\n\r\n  const sendTextMessage = () => {\r\n    if (socket) {\r\n      socket.emit('text', {\r\n        from: username,\r\n        to: chatTo,\r\n        text: inputMessage,\r\n      });\r\n      // 入力エリアをクリアする．\r\n      setInputMessage('');\r\n    }\r\n  };\r\n\r\n  /* ここまで */\r\n\r\n  return (<div className=\"text-chat\">\r\n    { /* メッセージの履歴の表示 */}\r\n    <div className=\"text-chat-message-list-container\">\r\n      <div className=\"text-chat-message-list\">\r\n        {// 自分が送ったか否かでCSSクラスを変える．\r\n          messages.map((message) => (<div key={message.from + message.time}\r\n            className={message.from === username ? \"text-chat-from-me\" : \"text-chat-from-them\"}>\r\n            {message.from === username ? <div>{message.text}</div> : <div>{message.from} &gt; {message.text}</div>}\r\n          </div>))}\r\n        <div ref={lastLineRef}></div> </div>\r\n    </div>\r\n    {/* メッセージの入力 */} <div className=\"text-chat-input\">\r\n      <select onChange={selectChatTo} value={chatTo}> <option value=\"*\">*</option> {userList.map((u) => (\r\n        <option key={u} value={u}>{u}</option>))}\r\n      </select> <input type=\"text\" onChange={inputChanged\r\n      }\r\n        value={inputMessage} onKeyUp={handleKeyUp} />\r\n      <button type=\"button\" onClick={sendTextMessage\r\n      }\r\n        disabled={socket === null || inputMessage === \"\"}>送信</button> </div>\r\n  </div>);\r\n}\r\n","/**\r\n * 第２回レポート課題用のJSXファイル\r\n */\r\n// React DOMの関数をimportする．\r\nimport { createRoot } from 'react-dom/client';\r\n\r\n// デバッグ用にエラー発生時にエラーメッセージを表示するコンポーネントで囲む．\r\nimport { ErrorBoundary } from './ErrorBoundary';\r\n\r\n// コンポーネントの定義をimportする．\r\n/* ここから */\r\n\r\nimport { Authenticate } from './Authenticate';\r\nimport { WithSocket } from './WithSocket';\r\nimport { TextChat } from './TextChat';\r\nimport { EchoBot } from './EchoBot';\r\n\r\n\r\n\r\n/* ここまで */\r\n\r\n// ReactコンポーネントをidがrootであるDOM要素に配置する．\r\nconst root = createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <ErrorBoundary>\r\n    {/* ここから */}\r\n\r\n    <Authenticate>\r\n      <WithSocket nsp=\"/chat\">\r\n        <TextChat />\r\n      </WithSocket>\r\n    </Authenticate>\r\n\r\n    <hr />\r\n    <EchoBot botname=\"EchoBot\" password=\"EchoBot\" nsp=\"/chat\" />\r\n\r\n    {/* ここまで */}\r\n  </ErrorBoundary>\r\n);\r\n","import '../css/EchoBot.css';\r\nimport { useState, useEffect, useContext } from 'react';\r\n\r\nimport { Authenticate, LoginContext } from './Authenticate.jsx';\r\nimport { WithSocket, SocketContext } from './WithSocket.jsx';\r\n\r\nconst EchoBotCore = () => {\r\n  const user = useContext(LoginContext);\r\n  const username = user ? user.username : '';\r\n  const socketRef = useContext(SocketContext);\r\n  const socket = socketRef ? socketRef.current : null;\r\n  // 表示用のログメッセージ\r\n  const [logMessage, setLogMessage] = useState('');\r\n  const handleTextMessage = (data) => {\r\n    if (data.to === username && data.text) {\r\n      const reply = `[${data.from}] ${data.text}`;\r\n      // メッセージを送信する．\r\n      socket.emit('text', {\r\n        from: username,\r\n        to: data.from,\r\n        text: reply\r\n      });\r\n      setLogMessage(`reply: ${reply}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      console.log(`[EchoBot (${username})] adding listeners`);\r\n      socket.on('text', handleTextMessage);\r\n      return () => {\r\n        console.log(`[EchoBot (${username})] removing listeners`);\r\n        socket.off('text', handleTextMessage);\r\n      }\r\n    }\r\n  }, []);\r\n  return (\r\n    <div>{logMessage}</div>\r\n  );\r\n}\r\nexport const EchoBot = (props) => {\r\n  return (\r\n    <div className=\"echo-bot\">\r\n      <Authenticate username={props.botname} password={props.password}>\r\n        <WithSocket nsp={props.nsp}>\r\n          <EchoBotCore />\r\n        </WithSocket>\r\n      </Authenticate>\r\n    </div>\r\n  );\r\n};"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$0cfbb9ccf2d9087e$export$a0806b2ebea0c4e","$0cfbb9ccf2d9087e$export$3f934a281632646c","$c54Ow","$lbJE2","createContext","props","usernameKey","usernameSaveKey","document","location","pathname","undefined","savedUsername","localStorage","getItem","usernameInput","setUsernameInput","useState","username","passwordInputRef","useRef","errorMessage","setErrorMessage","user","setUser","login","response","fetch","method","headers","body","JSON","stringify","password","current","value","ok","status","statusText","data","json","setItem","error","message","removeItem","useEffect","jsxs","children","className","jsx","type","onClick","Provider","placeholder","onChange","event","target","ref","defaultValue","$15a317c7617f5e34$export$d43a277f87371557","$brsYM","$lHCVX","useContext","LoginContext","socketRef","SocketContext","socket","inputMessage","setInputMessage","messages","setMessages","lastLineRef","scrollIntoView","block","chatTo","setChatTo","userList","setUserList","handleTextMessage","prevMessages","console","log","on","handleUserList","emit","from","off","handleUserlist","indexOf","sendTextMessage","to","text","map","time","u","onKeyUp","key","length","disabled","$dFw4U","$aFIWk","$6Jdkr","$4b02625dc988308e$var$EchoBotCore","logMessage","setLogMessage","reply","$c32bf622eed8008c$var$root","createRoot","getElementById","render","ErrorBoundary","Authenticate","WithSocket","nsp","TextChat","botname"],"version":3,"file":"report02.cf088188.js.map"}