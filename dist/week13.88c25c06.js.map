{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,E,E,O,C,e,I,G,E,E,O,C,e,I,GCiBC,IAAA,EAAA,EAAA,S,E,E,SAMM,IAAM,EAAe,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,IAEf,EAAe,AAAC,IAE3B,IAAM,EAAc,EAAM,eAAe,CACvC,CAAC,EAAE,SAAS,QAAQ,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAM,eAAe,CAAC,CAAC,CAAG,KAAA,EAEnE,EAAgB,EAAc,aAAa,OAAO,CAAC,GAAe,KAGlE,CAAC,EAAe,EAAiB,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,AAAmB,KAAA,IAAnB,EAAM,QAAQ,CAC/D,EAAM,QAAQ,CAAG,GAGb,EAAmB,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,IAG1B,CAAC,EAAc,EAAgB,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,IAG3C,CAAC,EAAM,EAAQ,CAAG,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,MAG3B,EAAQ,UACZ,GAAI,CACF,EAAgB,IAChB,IAAM,EAAW,MAAM,MAAM,SAAU,CACrC,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,SAAS,CAAC,CAEnB,SAAU,EACV,SAAU,EAAiB,OAAO,CAAC,KAAK,AAC1C,EACF,GACA,GAAI,CAAC,EAAS,EAAE,CAAE,CAEhB,GAAI,AAAoB,MAApB,EAAS,MAAM,CAEjB,MAAM,AAAI,MAAM,WAGhB,OAAM,AAAI,MAAM,CAAC,EAAE,EAAS,MAAM,CAAC,CAAC,EAAE,EAAS,UAAU,CAAC,CAAC,CAE/D,CAEA,IAAM,EAAO,M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","sources":["<anon>","src/js/Authenticate.jsx","src/js/week13.jsx","src/js/Paint.jsx","src/js/PaintChat.jsx"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire49ed\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire49ed\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"brsYM\", function(module, exports) {\n\n$parcel$export(module.exports, \"LoginContext\", () => $0cfbb9ccf2d9087e$export$a0806b2ebea0c4e);\n$parcel$export(module.exports, \"Authenticate\", () => $0cfbb9ccf2d9087e$export$3f934a281632646c);\n/**\r\n * 簡易ログイン機能\r\n * <Authenticate> ... </Authenticate>\r\n * \r\n * 未ログイン時: ログインの画面を表示する．\r\n * ログイン時：子要素を表示する．ならびにログオフボタンを上部に表示する．\r\n * \r\n * [自動ログインの実験的機能]\r\n * propsとして，username, passwordが渡されると，コンポーネントのマウント時に\r\n * 指定されたusernameとpasswordを使って自動的にログインを試みることにする．\r\n * ログアウトボタンは表示されない．\r\n * [開発支援用：localStorageにユーザ名を保存する機能]\r\n * propsに usernameSaveKey が指定されると，\r\n * usernameSaveKeyで指定された値をkeyとしてlocalStorageにユーザ名を保存する．\r\n * 保存されたユーザ名は，次回のマウント時に自動的に読み込まれ，ユーザ名に設定される．\r\n * その際には便宜的にpasswordはusernameと同じものに設定される．\r\n * ユーザはログインボタンをクリックすればログインされることになる．\r\n */ \nvar $c54Ow = parcelRequire(\"c54Ow\");\n\n\nvar $lbJE2 = parcelRequire(\"lbJE2\");\nconst $0cfbb9ccf2d9087e$export$a0806b2ebea0c4e = /*#__PURE__*/ (0, $lbJE2.createContext)();\nconst $0cfbb9ccf2d9087e$export$3f934a281632646c = (props)=>{\n    // localStorageに保存するユーザ名のキー\n    const usernameKey = props.usernameSaveKey ? `${document.location.pathname}#Authenticate${props.usernameSaveKey}` : undefined;\n    // localStorageからユーザ名を取得する．無ければ値をnullにする．\n    const savedUsername = usernameKey ? localStorage.getItem(usernameKey) : null;\n    // ユーザ名の入力\n    const [usernameInput, setUsernameInput] = (0, $lbJE2.useState)(props.username !== undefined ? props.username : savedUsername);\n    // passwordの入力 useRefを使って，値を取得する．\n    const passwordInputRef = (0, $lbJE2.useRef)(\"\");\n    // /loginにPOSTリクエストを送った際のエラーメッセージを表示する．\n    const [errorMessage, setErrorMessage] = (0, $lbJE2.useState)(\"\");\n    // ユーザ情報（usernameとtoken）を保持する．\n    const [user, setUser] = (0, $lbJE2.useState)(null);\n    // ログイン：loginのAPIを呼ぶ．\n    const login = async ()=>{\n        try {\n            setErrorMessage(\"\");\n            const response = await fetch(\"/login\", {\n                method: \"post\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    // username と password を渡す．\n                    username: usernameInput,\n                    password: passwordInputRef.current.value\n                })\n            });\n            if (!response.ok) {\n                // statusが200番台以外の時はエラーとして扱う．\n                if (response.status === 403) // Forbiddenエラーであれば，ログインエラーとして扱う．\n                throw new Error(\"\\u30ED\\u30B0\\u30A4\\u30F3\\u30FB\\u30A8\\u30E9\\u30FC\");\n                else // それ以外であれば，statusコードとstatusテキストをエラーとして表示することにする．\n                throw new Error(`${response.status} ${response.statusText}`);\n            }\n            // ユーザ情報（usernameとtoken）がJSONレスポンスとして返ってくるので，これをuserに保存する．\n            const data = await response.json();\n            setUser(data);\n            // ユーザ名をlocalStorageに保存する．\n            if (usernameKey !== undefined) localStorage.setItem(usernameKey, usernameInput);\n        } catch (error) {\n            setErrorMessage(error.message);\n            // エラーの場合は，ユーザ情報を削除することにする．\n            setUser(null);\n            if (usernameKey !== undefined) localStorage.removeItem(usernameKey);\n        }\n    };\n    // ログアウト：ユーザ情報を削除する．\n    const logout = ()=>{\n        setUser(null);\n        if (usernameKey !== undefined) localStorage.removeItem(usernameKey);\n    };\n    // 実験的な自動ログイン機能\n    (0, $lbJE2.useEffect)(()=>{\n        // usernameとpasswordがpropsに指定されている時には自動ログインを行うことにする．\n        if (props.username !== undefined && props.password !== undefined) {\n            // passwordを設定する．\n            passwordInputRef.current.value = props.password;\n            // ログインを試みる．\n            login();\n        } else if (usernameKey !== undefined) {\n            // ユーザ名をlocalStorageから取得する．\n            const username = localStorage.getItem(usernameKey);\n            if (username !== null) {\n                // 便宜的にpasswordをusernameと同じものに設定する．\n                passwordInputRef.current.value = username;\n                // ユーザ名を設定する．\n                setUsernameInput(username);\n            // 自動的にログインする場合は，loginを呼ぶ．\n            // login();\n            }\n        }\n    }, []);\n    return user ? /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                className: \"authenticate-logout\",\n                children: [\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"span\", {\n                        children: [\n                            \"User: \",\n                            user ? user.username : \"\"\n                        ]\n                    }),\n                    props.username !== undefined && props.password !== undefined ? null : /*#__PURE__*/ (0, $c54Ow.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: logout,\n                        children: \"\\u30ED\\u30B0\\u30A2\\u30A6\\u30C8\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $c54Ow.jsx)($0cfbb9ccf2d9087e$export$a0806b2ebea0c4e.Provider, {\n                value: user,\n                children: props.children\n            })\n        ]\n    }) : /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                className: \"authenticate-login\",\n                children: [\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"label\", {\n                        children: [\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: \"\\u30E6\\u30FC\\u30B6\\u540D:\"\n                            }),\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                                    type: \"text\",\n                                    placeholder: \"\\u30E6\\u30FC\\u30B6\\u540D\",\n                                    onChange: (event)=>setUsernameInput(event.target.value),\n                                    value: usernameInput\n                                })\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"label\", {\n                        children: [\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9:\"\n                            }),\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"span\", {\n                                children: /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                                    type: \"password\",\n                                    ref: passwordInputRef,\n                                    placeholder: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\",\n                                    defaultValue: \"\"\n                                })\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: login,\n                        children: \"\\u30ED\\u30B0\\u30A4\\u30F3\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                children: errorMessage === \"\" ? null : /*#__PURE__*/ (0, $c54Ow.jsx)(\"div\", {\n                    className: \"error-message\",\n                    onClick: ()=>setErrorMessage(\"\"),\n                    children: errorMessage\n                })\n            })\n        ]\n    });\n};\n\n});\n\n/**\r\n * 第１３週ミニ課題用のJSXファイル\r\n * ペイントチャットを実装する．\r\n */ // React DOMの関数をimportする．\n\nvar $c54Ow = parcelRequire(\"c54Ow\");\n\nvar $dFw4U = parcelRequire(\"dFw4U\");\n\nvar $aFIWk = parcelRequire(\"aFIWk\");\n\nvar $brsYM = parcelRequire(\"brsYM\");\n\nvar $lHCVX = parcelRequire(\"lHCVX\");\n/**\r\n * 簡単なペイントアプリケーション\r\n *  ペイントチャットでの活用を考慮している．\r\n */ // CSSの定義を読み込む．\n\nvar $c54Ow = parcelRequire(\"c54Ow\");\n\n\nvar $lbJE2 = parcelRequire(\"lbJE2\");\nconst $c9a0f875e10d7256$export$fbe17ae5b75efa7 = /*#__PURE__*/ (0, $lbJE2.forwardRef)(({ width: // canvasの大きさのデフォルト値\nwidth = 300, height: height = 200, lineCap: // canvasの描画コンテキストの指定\nlineCap = \"round\", lineJoin: lineJoin = \"round\", lineColor: lineColor = \"#ff0000\", lineWidth: lineWidth = 1, drawLine: // ペイントチャットで使用する時，関数を指定する．\ndrawLine, clearCanvas: clearCanvas }, ref)=>{\n    // canvas要素へのref\n    const canvasRef = (0, $lbJE2.useRef)(null);\n    // 最後に描いた線の終点（次に描く線の始点）\n    const lastPosRef = (0, $lbJE2.useRef)(null);\n    // ペンの色\n    const [penColor, setPenColor] = (0, $lbJE2.useState)(lineColor);\n    // ペンのサイズ\n    const [penSize, setPenSize] = (0, $lbJE2.useState)(lineWidth);\n    // ペンの色を変更する．\n    const changeColor = (event)=>{\n        setPenColor(event.target.value);\n    };\n    // ペンのサイズを変更する．\n    const changePenSize = (event)=>{\n        setPenSize(event.target.value);\n    };\n    /// Canvasに線を描く\n    // マウスイベントの座標をCanvas内の座標に変換する．\n    const getCoords = (event)=>{\n        const canvas = canvasRef.current;\n        const rect = canvas.getBoundingClientRect();\n        const style = getComputedStyle(canvas);\n        const bleft = parseFloat(style.borderLeftWidth);\n        const btop = parseFloat(style.borderTopWidth);\n        const pleft = parseFloat(style.paddingLeft);\n        const ptop = parseFloat(style.paddingTop);\n        const offsetX = rect.left + bleft + pleft;\n        const offsetY = rect.top + btop + ptop;\n        const posx = event.clientX - offsetX;\n        const posy = event.clientY - offsetY;\n        // Canvasが拡大・縮小表示されている場合の補正を行う．\n        const bright = parseFloat(style.borderRightWidth);\n        const bbottom = parseFloat(style.borderBottomWidth);\n        const pright = parseFloat(style.paddingRight);\n        const pbottom = parseFloat(style.paddingBottom);\n        const x = posx * canvas.width / (rect.width - (bleft + bright + pleft + pright));\n        const y = posy * canvas.height / (rect.height - (btop + bbottom + ptop + pbottom));\n        return {\n            x: x,\n            y: y\n        };\n    };\n    // mousedownのイベントリスナー\n    const mousedown = (event)=>{\n        // 描画モードに入る．\n        // canvas要素外にマウスが動くことも想定し，documentに対して，mousemoveとmouseupのイベントリスナーを設定する．\n        document.addEventListener(\"mousemove\", mousemove, false);\n        document.addEventListener(\"mouseup\", mouseup, false);\n        // ブラウザによってはテキスト選択が始まるのを防ぐ．\n        event.preventDefault();\n        // マウスが押された座標を記録しておく．\n        const pos = getCoords(event);\n        lastPosRef.current = pos;\n    };\n    // mousemoveのイベントリスナー\n    const mousemove = (event)=>{\n        const pos = getCoords(event);\n        // lastPosから現在のマウスの位置まで線を描く．\n        drawLine(lastPosRef.current.x, lastPosRef.current.y, pos.x, pos.y, penColor, penSize);\n        // lastPosを更新する．\n        lastPosRef.current = pos;\n    };\n    // mouseupのイベントリスナー\n    const mouseup = ()=>{\n        // mousemoveとmouseupのイベントリスナーを削除し，描画モードを抜ける．\n        document.removeEventListener(\"mousemove\", mousemove, false);\n        document.removeEventListener(\"mouseup\", mouseup, false);\n    };\n    // (x0, y0) から (x1, y1)まで線を描く．\n    const drawLineInternal = (x0, y0, x1, y1, color, size)=>{\n        const ctx = canvasRef.current.getContext(\"2d\");\n        ctx.save();\n        ctx.lineCap = lineCap;\n        ctx.lineJoin = lineJoin;\n        ctx.strokeStyle = color;\n        ctx.lineWidth = size;\n        ctx.beginPath();\n        ctx.moveTo(x0, y0);\n        ctx.lineTo(x1, y1);\n        ctx.stroke();\n        ctx.restore();\n    };\n    // drawLineが指定されていない時は，drawLineInternalに設定する．\n    if (!drawLine) drawLine = drawLineInternal;\n    /// Canvasのクリア\n    const clearCanvasInternal = ()=>{\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    };\n    // clearCanvasが指定されていない時は，clearCanvasInternalに設定する．\n    if (!clearCanvas) clearCanvas = clearCanvasInternal;\n    /// コンポーネントの外から呼び出せるメソッドを定義する．\n    // drawLineとclearCanvasを対象とする\n    (0, $lbJE2.useImperativeHandle)(ref, ()=>{\n        return {\n            drawLine: drawLineInternal,\n            clearCanvas: clearCanvasInternal\n        };\n    }, []);\n    return /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n        className: \"paint\",\n        children: [\n            /*#__PURE__*/ (0, $c54Ow.jsx)(\"canvas\", {\n                ref: canvasRef,\n                onMouseDown: mousedown,\n                width: width,\n                height: height\n            }),\n            /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n                className: \"paint-control\",\n                children: [\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"label\", {\n                        children: [\n                            \"\\u8272\",\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                                type: \"color\",\n                                value: penColor,\n                                onChange: changeColor\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsxs)(\"label\", {\n                        children: [\n                            \"\\u30DA\\u30F3\\u30B5\\u30A4\\u30BA\",\n                            /*#__PURE__*/ (0, $c54Ow.jsx)(\"input\", {\n                                type: \"number\",\n                                min: 1,\n                                max: 9,\n                                onChange: changePenSize,\n                                value: penSize\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0, $c54Ow.jsx)(\"button\", {\n                        type: \"button\",\n                        onClick: clearCanvas,\n                        children: \"\\u30AF\\u30EA\\u30A2\"\n                    })\n                ]\n            })\n        ]\n    });\n});\n\n\n/**\r\n * ペイントチャット\r\n */ // reactから使用する関数をimportする．\n/* ここから */ \nvar $c54Ow = parcelRequire(\"c54Ow\");\n\nvar $lbJE2 = parcelRequire(\"lbJE2\");\n\nvar $brsYM = parcelRequire(\"brsYM\");\n\nvar $lHCVX = parcelRequire(\"lHCVX\");\n\nconst $ed44abcea078e9bf$export$5da0e58058015beb = ()=>{\n    // LoginContextからユーザ情報を取得する．\n    const user = (0, $lbJE2.useContext)((0, $brsYM.LoginContext));\n    const username = user ? user.username : \"\";\n    // SocketContextからソケットを受け取る．\n    const socketRef = (0, $lbJE2.useContext)((0, $lHCVX.SocketContext));\n    const socket = socketRef ? socketRef.current : null;\n    /* ここから */ // Paintコンポーネントへのref\n    const paintRef = (0, $lbJE2.useRef)(null);\n    // ペイントチャットのイベントリスナー（コマンドを処理する）\n    const handlePaintCommand = (data)=>{\n        if (data.command === \"draw-line\") paintRef.current.drawLine(data.x0, data.y0, data.x1, data.y1, data.penColor, data.penSize);\n        else if (data.command === \"clear-canvas\") paintRef.current.clearCanvas();\n        else console.log(`[PaintChat] ${data.command} is not supported.`);\n    };\n    // draw-lineのコマンドを送る．\n    const sendDrawLine = (x0, y0, x1, y1, penColor, penSize)=>{\n        if (socket) socket.emit(\"paint\", {\n            from: username,\n            command: \"draw-line\",\n            x0: x0,\n            y0: y0,\n            x1: x1,\n            y1: y1,\n            penColor: penColor,\n            penSize: penSize\n        });\n    };\n    // キャンバスをクリアするコマンド('clear-canvas')を送る．\n    const sendClearCanvas = ()=>{\n        if (socket) socket.emit(\"paint\", {\n            from: username,\n            command: \"clear-canvas\"\n        });\n    };\n    // コンポーネントがマウントされた時にソケットにイベントリスナーをつける．\n    (0, $lbJE2.useEffect)(()=>{\n        if (socket) {\n            console.log(\"[PaintChat] adding listeners\");\n            socket.on(\"paint\", handlePaintCommand);\n            // これまでの描画コマンドをリクエストする．\n            // これによりこれまでのペイントコマンドが送られ，画面の同期が可能になる．\n            socket.emit(\"paint-history\", {\n                from: username\n            });\n            // クリーンアップ関数を返す．\n            return ()=>{\n                console.log(\"[PaintChat] removing listeners\");\n                socket.off(\"paint\", handlePaintCommand);\n            };\n        }\n    }, []);\n    return /*#__PURE__*/ (0, $c54Ow.jsx)((0, $c9a0f875e10d7256$export$fbe17ae5b75efa7), {\n        ref: paintRef,\n        drawLine: sendDrawLine,\n        clearCanvas: sendClearCanvas\n    });\n/* ここまで */ };\n\n\n/* ここまで */ // ReactコンポーネントをidがrootであるDOM要素に配置する．\nconst $87985353071d5458$var$root = (0, $dFw4U.createRoot)(document.getElementById(\"root\"));\n$87985353071d5458$var$root.render(/*#__PURE__*/ (0, $c54Ow.jsxs)((0, $aFIWk.ErrorBoundary), {\n    children: [\n        /*#__PURE__*/ (0, $c54Ow.jsx)(\"p\", {\n            children: \"\\u30DA\\u30A4\\u30F3\\u30C8\\u30C1\\u30E3\\u30C3\\u30C8\"\n        }),\n        /*#__PURE__*/ (0, $c54Ow.jsxs)(\"div\", {\n            className: \"cols-wrap two-cols\",\n            children: [\n                /*#__PURE__*/ (0, $c54Ow.jsx)((0, $brsYM.Authenticate), {\n                    children: /*#__PURE__*/ (0, $c54Ow.jsx)((0, $lHCVX.WithSocket), {\n                        nsp: \"/chat\",\n                        children: /*#__PURE__*/ (0, $c54Ow.jsx)((0, $ed44abcea078e9bf$export$5da0e58058015beb), {})\n                    })\n                }),\n                /*#__PURE__*/ (0, $c54Ow.jsx)((0, $brsYM.Authenticate), {\n                    children: /*#__PURE__*/ (0, $c54Ow.jsx)((0, $lHCVX.WithSocket), {\n                        nsp: \"/chat\",\n                        children: /*#__PURE__*/ (0, $c54Ow.jsx)((0, $ed44abcea078e9bf$export$5da0e58058015beb), {})\n                    })\n                })\n            ]\n        })\n    ]\n}));\n\n\n//# sourceMappingURL=week13.88c25c06.js.map\n","/**\r\n * 簡易ログイン機能\r\n * <Authenticate> ... </Authenticate>\r\n * \r\n * 未ログイン時: ログインの画面を表示する．\r\n * ログイン時：子要素を表示する．ならびにログオフボタンを上部に表示する．\r\n * \r\n * [自動ログインの実験的機能]\r\n * propsとして，username, passwordが渡されると，コンポーネントのマウント時に\r\n * 指定されたusernameとpasswordを使って自動的にログインを試みることにする．\r\n * ログアウトボタンは表示されない．\r\n * [開発支援用：localStorageにユーザ名を保存する機能]\r\n * propsに usernameSaveKey が指定されると，\r\n * usernameSaveKeyで指定された値をkeyとしてlocalStorageにユーザ名を保存する．\r\n * 保存されたユーザ名は，次回のマウント時に自動的に読み込まれ，ユーザ名に設定される．\r\n * その際には便宜的にpasswordはusernameと同じものに設定される．\r\n * ユーザはログインボタンをクリックすればログインされることになる．\r\n */\r\nimport '../css/Authenticate.css';\r\n\r\nimport { useState, useRef, createContext, useEffect } from 'react';\r\n\r\n// ユーザ情報を子要素に渡すために context を使用する．\r\nexport const LoginContext = createContext();\r\n\r\nexport const Authenticate = (props) => {\r\n  // localStorageに保存するユーザ名のキー\r\n  const usernameKey = props.usernameSaveKey ?\r\n    `${document.location.pathname}#Authenticate${props.usernameSaveKey}` : undefined;\r\n  // localStorageからユーザ名を取得する．無ければ値をnullにする．\r\n  const savedUsername = usernameKey ? localStorage.getItem(usernameKey) : null;\r\n\r\n  // ユーザ名の入力\r\n  const [usernameInput, setUsernameInput] = useState(props.username !== undefined ?\r\n    props.username : savedUsername);\r\n\r\n  // passwordの入力 useRefを使って，値を取得する．\r\n  const passwordInputRef = useRef('');\r\n\r\n  // /loginにPOSTリクエストを送った際のエラーメッセージを表示する．\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  // ユーザ情報（usernameとtoken）を保持する．\r\n  const [user, setUser] = useState(null);\r\n\r\n  // ログイン：loginのAPIを呼ぶ．\r\n  const login = async () => {\r\n    try {\r\n      setErrorMessage('');\r\n      const response = await fetch('/login', {\r\n        method: 'post',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          // username と password を渡す．\r\n          username: usernameInput,\r\n          password: passwordInputRef.current.value\r\n        })\r\n      });\r\n      if (!response.ok) {\r\n        // statusが200番台以外の時はエラーとして扱う．\r\n        if (response.status === 403) {\r\n          // Forbiddenエラーであれば，ログインエラーとして扱う．\r\n          throw new Error('ログイン・エラー');\r\n        } else {\r\n          // それ以外であれば，statusコードとstatusテキストをエラーとして表示することにする．\r\n          throw new Error(`${response.status} ${response.statusText}`);\r\n        }\r\n      }\r\n      // ユーザ情報（usernameとtoken）がJSONレスポンスとして返ってくるので，これをuserに保存する．\r\n      const data = await response.json();\r\n      setUser(data);\r\n      // ユーザ名をlocalStorageに保存する．\r\n      if (usernameKey !== undefined) {\r\n        localStorage.setItem(usernameKey, usernameInput);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(error.message);\r\n      // エラーの場合は，ユーザ情報を削除することにする．\r\n      setUser(null);\r\n      if (usernameKey !== undefined) {\r\n        localStorage.removeItem(usernameKey);\r\n      }\r\n    }\r\n  };\r\n\r\n  // ログアウト：ユーザ情報を削除する．\r\n  const logout = () => {\r\n    setUser(null);\r\n    if (usernameKey !== undefined) {\r\n      localStorage.removeItem(usernameKey);\r\n    }\r\n  };\r\n\r\n  // 実験的な自動ログイン機能\r\n  useEffect(() => {\r\n    // usernameとpasswordがpropsに指定されている時には自動ログインを行うことにする．\r\n    if (props.username !== undefined && props.password !== undefined) {\r\n      // passwordを設定する．\r\n      passwordInputRef.current.value = props.password;\r\n      // ログインを試みる．\r\n      login();\r\n    } else if (usernameKey !== undefined) {\r\n      // ユーザ名をlocalStorageから取得する．\r\n      const username = localStorage.getItem(usernameKey);\r\n      if (username !== null) {\r\n        // 便宜的にpasswordをusernameと同じものに設定する．\r\n        passwordInputRef.current.value = username;\r\n        // ユーザ名を設定する．\r\n        setUsernameInput(username);\r\n        // 自動的にログインする場合は，loginを呼ぶ．\r\n        // login();\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return (user ?\r\n    <div>\r\n      {/* ログインしている場合 */}\r\n      <div className=\"authenticate-logout\">\r\n        <span>User: {user ? user.username : ''}</span>\r\n        {/* 自動ログインの場合はログアウトボタンを表示しないことにする． */}\r\n        {(props.username !== undefined && props.password !== undefined) ? null :\r\n          <button type=\"button\" onClick={logout}>ログアウト</button>}\r\n      </div>\r\n      <LoginContext.Provider value={user}>\r\n        {/* userをLoginContextに渡すとともに，子要素を表示する． */}\r\n        {props.children}\r\n      </LoginContext.Provider>\r\n    </div>\r\n    :\r\n    <div>\r\n      {/* 未ログインの場合 */}\r\n      <div className=\"authenticate-login\">\r\n        <label>\r\n          <span>ユーザ名:</span>\r\n          <span><input type=\"text\" placeholder=\"ユーザ名\"\r\n            onChange={(event) => setUsernameInput(event.target.value)} value={usernameInput} />\r\n          </span>\r\n        </label>\r\n        <label>\r\n          <span>パスワード:</span>\r\n          <span><input type=\"password\" ref={passwordInputRef}\r\n            placeholder=\"パスワード\" defaultValue='' />\r\n          </span>\r\n        </label>\r\n        <button type=\"button\" onClick={login}>ログイン</button>\r\n      </div>\r\n      <div>\r\n        {errorMessage === '' ? null :\r\n          <div className=\"error-message\" onClick={() => setErrorMessage('')}>\r\n            {errorMessage}</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","/**\r\n * 第１３週ミニ課題用のJSXファイル\r\n * ペイントチャットを実装する．\r\n */\r\n// React DOMの関数をimportする．\r\nimport { createRoot } from 'react-dom/client';\r\n\r\n// デバッグ用にエラー発生時にエラーメッセージを表示するコンポーネントで囲む．\r\nimport { ErrorBoundary } from './ErrorBoundary';\r\n\r\n// コンポーネントの定義をimportする．\r\nimport { Authenticate } from './Authenticate';\r\nimport { WithSocket } from './WithSocket';\r\n// サンプルとして単独で動作するPaintも配置する．\r\nimport { Paint } from './Paint';\r\n/* ここから */\r\nimport { PaintChat } from './PaintChat';\r\n/* ここまで */\r\n\r\n// ReactコンポーネントをidがrootであるDOM要素に配置する．\r\nconst root = createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <ErrorBoundary>\r\n    {/* 以下のペイント・アプリはミニ課題提出時にはコメントアウトしてください */}\r\n    {/**\r\n    <p>単独で動作する簡単なペイント・アプリ</p>\r\n    <Paint />\r\n    */}\r\n\r\n    <p>ペイントチャット</p>\r\n    {/* 動作確認を容易にするため，チャットアプリを２つ横に並べて配置する．*/}\r\n    <div className=\"cols-wrap two-cols\">\r\n      {/* ここから */}\r\n\r\n      <Authenticate>\r\n        <WithSocket nsp=\"/chat\">\r\n          <PaintChat />\r\n        </WithSocket>\r\n      </Authenticate>\r\n      <Authenticate>\r\n        <WithSocket nsp=\"/chat\">\r\n          <PaintChat />\r\n        </WithSocket>\r\n      </Authenticate>\r\n\r\n\r\n\r\n      {/* ここまで */}\r\n    </div>\r\n  </ErrorBoundary >\r\n);\r\n","/**\r\n * 簡単なペイントアプリケーション\r\n *  ペイントチャットでの活用を考慮している．\r\n */\r\n// CSSの定義を読み込む．\r\nimport '../css/Paint.css';\r\n\r\nimport { useState, useRef, useImperativeHandle, forwardRef } from 'react';\r\n\r\nexport const Paint = forwardRef(({\r\n  // canvasの大きさのデフォルト値\r\n  width = 300, height = 200,\r\n  // canvasの描画コンテキストの指定\r\n  lineCap = 'round',\r\n  lineJoin = 'round',\r\n  lineColor = '#ff0000', // penColorの初期値\r\n  lineWidth = 1, // penSizeの初期値\r\n  // ペイントチャットで使用する時，関数を指定する．\r\n  drawLine, clearCanvas }, ref) => {\r\n\r\n  // canvas要素へのref\r\n  const canvasRef = useRef(null);\r\n  // 最後に描いた線の終点（次に描く線の始点）\r\n  const lastPosRef = useRef(null);\r\n  // ペンの色\r\n  const [penColor, setPenColor] = useState(lineColor);\r\n  // ペンのサイズ\r\n  const [penSize, setPenSize] = useState(lineWidth);\r\n\r\n  // ペンの色を変更する．\r\n  const changeColor = (event) => {\r\n    setPenColor(event.target.value);\r\n  };\r\n\r\n  // ペンのサイズを変更する．\r\n  const changePenSize = (event) => {\r\n    setPenSize(event.target.value);\r\n  };\r\n\r\n  /// Canvasに線を描く\r\n  // マウスイベントの座標をCanvas内の座標に変換する．\r\n  const getCoords = (event) => {\r\n    const canvas = canvasRef.current;\r\n    const rect = canvas.getBoundingClientRect();\r\n    const style = getComputedStyle(canvas);\r\n    const bleft = parseFloat(style.borderLeftWidth);\r\n    const btop = parseFloat(style.borderTopWidth);\r\n    const pleft = parseFloat(style.paddingLeft);\r\n    const ptop = parseFloat(style.paddingTop);\r\n    const offsetX = rect.left + bleft + pleft;\r\n    const offsetY = rect.top + btop + ptop;\r\n    const posx = event.clientX - offsetX;\r\n    const posy = event.clientY - offsetY;\r\n    // Canvasが拡大・縮小表示されている場合の補正を行う．\r\n    const bright = parseFloat(style.borderRightWidth);\r\n    const bbottom = parseFloat(style.borderBottomWidth);\r\n    const pright = parseFloat(style.paddingRight);\r\n    const pbottom = parseFloat(style.paddingBottom);\r\n    const x = posx * canvas.width / (rect.width - (bleft + bright + pleft + pright));\r\n    const y = posy * canvas.height / (rect.height - (btop + bbottom + ptop + pbottom));\r\n    return { x, y };\r\n  };\r\n\r\n  // mousedownのイベントリスナー\r\n  const mousedown = (event) => {\r\n    // 描画モードに入る．\r\n    // canvas要素外にマウスが動くことも想定し，documentに対して，mousemoveとmouseupのイベントリスナーを設定する．\r\n    document.addEventListener('mousemove', mousemove, false);\r\n    document.addEventListener('mouseup', mouseup, false);\r\n    // ブラウザによってはテキスト選択が始まるのを防ぐ．\r\n    event.preventDefault();\r\n    // マウスが押された座標を記録しておく．\r\n    const pos = getCoords(event);\r\n    lastPosRef.current = pos;\r\n  };\r\n\r\n  // mousemoveのイベントリスナー\r\n  const mousemove = (event) => {\r\n    const pos = getCoords(event);\r\n    // lastPosから現在のマウスの位置まで線を描く．\r\n    drawLine(\r\n      lastPosRef.current.x,\r\n      lastPosRef.current.y,\r\n      pos.x,\r\n      pos.y,\r\n      penColor,\r\n      penSize\r\n    );\r\n    // lastPosを更新する．\r\n    lastPosRef.current = pos;\r\n  };\r\n\r\n  // mouseupのイベントリスナー\r\n  const mouseup = () => {\r\n    // mousemoveとmouseupのイベントリスナーを削除し，描画モードを抜ける．\r\n    document.removeEventListener('mousemove', mousemove, false);\r\n    document.removeEventListener('mouseup', mouseup, false);\r\n  };\r\n\r\n  // (x0, y0) から (x1, y1)まで線を描く．\r\n  const drawLineInternal = (x0, y0, x1, y1, color, size) => {\r\n    const ctx = canvasRef.current.getContext('2d');\r\n    ctx.save();\r\n    ctx.lineCap = lineCap;\r\n    ctx.lineJoin = lineJoin;\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = size;\r\n    ctx.beginPath();\r\n    ctx.moveTo(x0, y0);\r\n    ctx.lineTo(x1, y1);\r\n    ctx.stroke();\r\n    ctx.restore();\r\n  };\r\n\r\n  // drawLineが指定されていない時は，drawLineInternalに設定する．\r\n  if (!drawLine) {\r\n    drawLine = drawLineInternal;\r\n  }\r\n\r\n  /// Canvasのクリア\r\n  const clearCanvasInternal = () => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  };\r\n\r\n  // clearCanvasが指定されていない時は，clearCanvasInternalに設定する．\r\n  if (!clearCanvas) {\r\n    clearCanvas = clearCanvasInternal;\r\n  }\r\n\r\n  /// コンポーネントの外から呼び出せるメソッドを定義する．\r\n  // drawLineとclearCanvasを対象とする\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      drawLine: drawLineInternal,\r\n      clearCanvas: clearCanvasInternal\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"paint\">\r\n      <canvas ref={canvasRef} onMouseDown={mousedown} width={width} height={height} />\r\n      <div className=\"paint-control\">\r\n        <label>\r\n          色\r\n          <input type=\"color\" value={penColor} onChange={changeColor} />\r\n        </label>\r\n        <label>\r\n          ペンサイズ\r\n          <input type=\"number\" min={1} max={9}\r\n            onChange={changePenSize} value={penSize} />\r\n        </label>\r\n        <button type=\"button\" onClick={clearCanvas}>\r\n          クリア\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","/**\r\n * ペイントチャット\r\n */\r\n// reactから使用する関数をimportする．\r\n/* ここから */\r\nimport { useRef, useContext, useEffect } from 'react';\r\n/* ここまで */\r\n\r\n// 簡易ログイン機能を使用する．\r\nimport { LoginContext } from './Authenticate';\r\n// Socket wrapperを使用する\r\nimport { SocketContext } from './WithSocket';\r\n\r\n// ペイントを使用する．\r\nimport { Paint } from './Paint';\r\n\r\nexport const PaintChat = () => {\r\n  // LoginContextからユーザ情報を取得する．\r\n  const user = useContext(LoginContext);\r\n  const username = user ? user.username : '';\r\n  // SocketContextからソケットを受け取る．\r\n  const socketRef = useContext(SocketContext);\r\n  const socket = socketRef ? socketRef.current : null;\r\n\r\n  /* ここから */\r\n  // Paintコンポーネントへのref\r\n  const paintRef = useRef(null);\r\n  // ペイントチャットのイベントリスナー（コマンドを処理する）\r\n  const handlePaintCommand = (data) => {\r\n    if (data.command === 'draw-line') {\r\n      paintRef.current.drawLine(\r\n        data.x0, data.y0, data.x1, data.y1, data.penColor, data.penSize\r\n      );\r\n    } else if (data.command === 'clear-canvas') {\r\n      paintRef.current.clearCanvas();\r\n    } else {\r\n      console.log(`[PaintChat] ${data.command} is not supported.`);\r\n    }\r\n  };\r\n\r\n  // draw-lineのコマンドを送る．\r\n  const sendDrawLine = (x0, y0, x1, y1, penColor, penSize) => {\r\n    if (socket) {\r\n      socket.emit('paint', {\r\n        from: username,\r\n        command: 'draw-line',\r\n        x0, y0, x1, y1, penColor, penSize\r\n      });\r\n    }\r\n  };\r\n\r\n  // キャンバスをクリアするコマンド('clear-canvas')を送る．\r\n  const sendClearCanvas = () => {\r\n    if (socket) {\r\n      socket.emit('paint', {\r\n        from: username,\r\n        command: 'clear-canvas',\r\n      });\r\n    }\r\n  };\r\n  \r\n  // コンポーネントがマウントされた時にソケットにイベントリスナーをつける．\r\n  useEffect(() => {\r\n    if (socket) {\r\n      console.log('[PaintChat] adding listeners');\r\n      socket.on('paint', handlePaintCommand);\r\n      // これまでの描画コマンドをリクエストする．\r\n      // これによりこれまでのペイントコマンドが送られ，画面の同期が可能になる．\r\n      socket.emit('paint-history', { from: username });\r\n      // クリーンアップ関数を返す．\r\n      return () => {\r\n        console.log('[PaintChat] removing listeners')\r\n        socket.off('paint', handlePaintCommand);\r\n      };\r\n    }\r\n  }, []);\r\n  return (\r\n    <Paint ref={paintRef}\r\n      drawLine={sendDrawLine}\r\n      clearCanvas={sendClearCanvas} />\r\n  );\r\n\r\n  /* ここまで */\r\n};\r\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$0cfbb9ccf2d9087e$export$a0806b2ebea0c4e","$0cfbb9ccf2d9087e$export$3f934a281632646c","$c54Ow","$lbJE2","createContext","props","usernameKey","usernameSaveKey","document","location","pathname","undefined","savedUsername","localStorage","getItem","usernameInput","setUsernameInput","useState","username","passwordInputRef","useRef","errorMessage","setErrorMessage","user","setUser","login","response","fetch","method","headers","body","JSON","stringify","password","current","value","ok","status","statusText","data","json","setItem","error","message","removeItem","useEffect","jsxs","children","className","jsx","type","onClick","Provider","placeholder","onChange","event","target","ref","defaultValue","$dFw4U","$aFIWk","$brsYM","$lHCVX","$c9a0f875e10d7256$export$fbe17ae5b75efa7","forwardRef","width","height","lineCap","lineJoin","lineColor","lineWidth","drawLine","clearCanvas","canvasRef","lastPosRef","penColor","setPenColor","penSize","setPenSize","getCoords","canvas","rect","getBoundingClientRect","style","getComputedStyle","bleft","parseFloat","borderLeftWidth","btop","borderTopWidth","pleft","paddingLeft","ptop","paddingTop","offsetX","left","offsetY","top","posx","clientX","posy","clientY","bright","borderRightWidth","bbottom","borderBottomWidth","pright","paddingRight","pbottom","paddingBottom","x","y","mousemove","pos","mouseup","removeEventListener","drawLineInternal","x0","y0","x1","y1","color","size","ctx","getContext","save","strokeStyle","beginPath","moveTo","lineTo","stroke","restore","clearCanvasInternal","clearRect","useImperativeHandle","onMouseDown","addEventListener","preventDefault","min","max","$ed44abcea078e9bf$export$5da0e58058015beb","useContext","LoginContext","socketRef","SocketContext","socket","paintRef","handlePaintCommand","command","console","log","on","emit","from","off","$87985353071d5458$var$root","createRoot","getElementById","render","ErrorBoundary","Authenticate","WithSocket","nsp"],"version":3,"file":"week13.88c25c06.js.map"}